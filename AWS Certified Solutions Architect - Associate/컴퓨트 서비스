# 개요

전통적인 dat 센터 및 서버 룸은 소중한 서버를 지키기 위해 존재.  
하지만 서버를 제대로 활용하기 위해 랙,  전원공급차이, 케이블, 각종 스위치, 방화벽, 냉각시스템 등 다양하면서 복잡한 추가 환경 요소 필요.

AWS의 Elastic Compute Cloud(EC2)는 data 센터 서버룸의 사용 경험을 그대로 복원하는 데 초점을 맞춰 설계, 그 중심에는 인스턴스로 잘 알려진 EC2 가상 서버 있음. EC2.는 전통적인 로컬 서버 룸의 기능을 제공 동시에 인스턴스 운영에 필요한 각종 지원 서비스  및 기능 강화 요소 통합적으로 제공, 리소스 모니터링, 리소스 할당 및 관리, 컨테이너 오케스트레이션 등의 기능 포함.

EC2 에코시스템의 기능과 성능 더욱 높일 수 있는 다양한 도구 활용 전략

- 프로젝트에 적합한 HW 리소스 기반의 EC2 인스턴스 프로비저닝 방법
- 애플리케이션 적합한 운영 체제의 환경설정 방법
- 인스턴스에 적합한, 안전하며 효과적인 네트워크 환경 구성 방법
- 애플리케이션 시작 및 운영을 위한 인스턴스 부팅 스크립트 실행 방법
- 기업 및 부서별 워크로드를 고려한 EC2 가격 모델 선택 방법
- EC2 인스턴스 생애주기 관리 및 활용 방법 이해
- 사용자 니즈 적합 스토리지 드라이브 선택 방법
- 키 페어, 시큐리티 그룹, 네트워크 액세스 리스트, IAM 롤 등을 활용한 EC2 리소스 보안 유지방법
- Auto Scaling 활용 변화하는 요구 수준에 따라 인스턴스 스케일업 및 스케일다운하는 방법
- 어드민 또는 엔드유저로서 인스턴스 접속하는 방법
- elastic Container Service(ECS) 및 Elastic Kubernetes Service(EKS) 이용 컨테이너 워크로드 시작 방법

# EC2 인스턴스의 개요

EC2 인스턴스는 물리적 서버를 가상화 또는 추상화 하는 것으로 볼 수 있음. 기능적으로는 실제 서버와 차이 없음.  
사용자는 인스턴스를 통해 스토리지, 메모리, 네트워크 인터페이스 등 접근할 수 있음. 인스턴스에 장착된 스토리지 드라이브에는 최신 운영체제가 탑재.  
사용자는 어떤 HW 스펙 리소스와 운영체제, SW로 인스턴스를 구성할지 결정. 자신이 사용한 리소스의 양에 따라 비용을 부담.

## 인스턴스 프로비저닝

사용자는 인스턴스 운영 체제 및 SW 스택, HW 스택 실행 환경을 설정. OS는 AMI 정의돼 있으며, HW 사양은 인스턴스 타입에 따라 달라짐

### EC2 아마존 머신 이미지

AMI 론칭할 인스턴스 루트 data 불륨에 어떤 .애플리케이션 SW 포함돼야 하는지 설명하는 정보가 담긴 템플릿 문서,

AMI 4가지 제공

- **Amazon 퀵 스타트 AMI**
    
    새 인스턴스 론칭 작업 진행 시, 콘솔에서 첫 번재 등장, Linux 또는 windows Server OS 다양한 배포판 기반 다양한 용도로 활용 할 수 있는 인기 높은 이미지.  
    최신의 기능은 물론, 공식적인 지원 제공
    
- **AWS 마켓플레이스 AMI**
    
    SAP 및 Cisco 포함해 수많은 기업용 SW 벤더가 지원 및 제공하는 AWS 공식, 사용 이미지
    
- **커뮤니티 AMI**
    
    AWS 커뮤니티 100,000개 이상의 이미지가 있음, 이들 중 상당 수는 독립적인 벤더에 의해 특수한 목적 적합하도록 개발 및 배포.  
    SW 리소스의 커스텀 조합으로 애플리케이션을 빌드할 계획이라면 커뮤니티 AMI 카탈로그에서 먼저 찾기
    
- **프라이빗 AMI**
    
    직접 프라이빗 AMI 만들어서 사용하는 것도 가능.  
    ex. 급증하는 사용자의 요구수준 맞춰 직접 일수한 수의 인스턴스로 확장할 수 있는 AMI 만들어서 사용.  
    검증 과정을 거친, 신뢰할 수 있는 인스턴스 이미지를 AMI 사용해 오토스케일링 작업을 좀 더 쉽게 처리 가능.  
    → 이미지는 AMI로 공유, AWS VM Import/Export 도구를 이용 로컬 인프라에서 VM 임포트해서 사용.
    
    기본적으로 이미지는 어떤 리전에서나 동일한 기능을 제공하는 것이 일반적이지만 특정 AMI 하나의 리전에서만 사용할 수 있는 경우.  
    → 인스턴스 배포 계획 시 하나의 리전에서 AMI ID 호출하면 다른 리전에서는 호출 작업이 실패할 수 있다.
    
    - 과금 관련 주의사항

### 인스턴스 타입

AWS 인스턴스 타입에 따라, or 선택한 HW 프로필에 따라 HW 리소스를 할당화므로 선택한 타입에 따라 인스턴스 워크로드처리 능력이 달라짐.  
인스턴스 타입 선택 시, 컴퓨터 파워, 메모리, 스토리지 용량 등이 균형을 이루고 있는 것이 좋음.  
애플리케이션에 적합하면서 요구 비용 수준에 맞는 인스턴스 선택하는 것이 중요함.

인스턴스에 대한 사용자의 니즈는 시간 흐름에 따라 바뀔 수 있음.  
기존인스턴스를 중지, 새로운 인스턴스 타입을 변경, 기존 인스턴스 사양의 수준 또는 인스턴스 복사본 이용해서 다시 시작. 현재 5개 인스턴스 패밀리에 대해 75가지 타입을 제공. → 타입은 지속적으로 추가 및 변경.

https://aws.amazon.com/ko/ec2/instance-types/

**EC2 인스턴스 타입 패밀리 및 주요 용도**

| 인스턴스 타입 | 패밀리 타입 |
| --- | --- |
| 범용 인스턴스 | Mac, T4g, T3, T2, M6g, M6i, M6a, M5, M5a, M5n, M5zn, M4, A1 |
| 컴퓨트 최적화 | C7g, C6f, C6i, Hpc6a, C5, C5a, C5n, C4 |
| 메모리 최적화 | R6g, R6i, R5, R5a, R5b, R5n, R4, X2gd, X2idn, X2iedn, X2iezn, X1e, X1, high Memory,z1d |
| 가속화 컴퓨팅 | P4, P3, P2, DL1, Trn1, G5, G5g, G5dn, G4ad, G3, F1, VT1 |
| 스토리지 최적화 | Im4gn, Is4gen, 14i, 13, 13en, D2, D3, D3en, H1 |

다섯 가지 인스턴스 타입에 대한 개요 설명

**범용 타입(General Purpose)**

범용 인스턴스 패밀리에는 T3, T2, M5, M4 타입이 포함, 컴퓨트, 메모리, 네트워크 리소스 균형에 초점을 맞춰 일반적이며 다양한 목적에 사용하도록 설계.  
그중 T2  타입은 1개의 가상 CPU 및 [0.5.GB](http://0.5.GB) 메모리를 지닌 t2.nano부터, 8개의 vCPU 및 32GB의 메모리 지닌 t2.2xlarge까지 다양한 인스턴스가 포함.  
t2.micro의 경우 프리 티어로 제공되므로 입문자에 의해 실험적으로 자주활용, 가벼운 웹사이트 구현부터 다양한 목적의 개발 프로젝트에서도 사용

T4g 및 M6g 인스턴스 타입은 AWS가 디자인 Arm 기반 Graviton2 프로세서를 사용.  
T4g는 tf6.nano부터 t4g.2xlarge에 이르는 스펙 제공.  
Mac 인스턴스는 macOS 플랫폼 기반의 애플리케이션 개발자를 위한 인스턴스 타입

**컴퓨트 최적화(Compute Optimized)**

고사양의 웹 서버 구현 및 고성능이 요구되는 머신러닝 워크로드 처리에는 컴퓨트 최적화 타입인 C6i 타입이 적합.  C6i 타입은 c6i.large부터 c6i.metal에 이르는 다양한 스펙 제공

**메모리 최적화(Memory Opimized)**

Arm, Intel, AMD 기반의 메모리 최적화 타입 인스턴스는 고성능 DB, data 분석, 캐싱 작업에 적합.  
3세대 Intel Xeon Scalable 프로세서 기반 R6i. 타입은 좀 더 높은 수준의 메모리 용량 및 네트워크 성능 제공. → X1e, X1, R4, 타입은 3.9 테라바이트의 DRAM 메모리 및 저지연성의 SSD 스토리지 불륨이 제공.

**가속 컴퓨팅(Accelerated Computing)** 

가속 컴퓨팅 인스턴스에는 고성능 범용 그래픽 프로세싱 유닛(GPGPU)이 탑재된 P4, P3, G5, F1 타입 있으며, 최신의 NVIDIA GPU 사용.  
가속 컴퓨팅 인스턴스는 주로 고성능 컴퓨팅(HPC), 금융 분석, 엔지니어링, 인공지능 워크로드, 의학 연구 사용

**스토리지 최적화(Storage Optimized)**

H1, I3, D2 타입은 대용량 스토리지 불륨을 탑재한 스토리지 최적화 인스턴스이며, I3의 경우 60TB의 HDD 스토리지를 선택할 수 있음, 분산 파일 시스템 또는 고용량 데이터 처리 애플리케이션 구현에 활용.

AWS 인스턴스 타입 및 패밀리는 신기술 발전 및 고객의 요구 수준에 따라 새롭게 추가, 세부 사양이 변경, → AWS 인스턴스 명칭 부여 규칙과 주요 팸리리 간의 차이점 명확하게 이해!

### 인스턴스 환경설정

EC2 인스턴스 생성 위치는 성능의 환경 설정 측면에서 중요.  
→ 인스턴스의 지리적 위치, VPC, 테넌시 모델을 기준으로 설명

**AWS 리전**

AWS  서버는 전세계에 흩어져 있는 AWS data 센터에 위치.  
보통 고객과 가장 가까운 지역의 리전에 EC2 인스턴스를 론칭, 법규에 의해 사용자 data의 위치에 제한이 있는 경우 해당 규정에 부합하는 지역의 서버를 사용.  
EC2 리소스는 해당 리전 내에서만 관리. 관리 콘솔 화면 상단의 드롭다운 메뉴에서 리전을 선택 or AWS CLI 또는 SDK 통해 기본 설정값 설정, CLI aws configure 명령 통해 환경설정값을 업데이트.  
리전 선택시 리전별로 비용과 니으, 특징 등이 다를 수 있다는 점 주의.

**VPC**

https://docs.aws.amazon.com/ko_kr/vpc/latest/userguide/what-is-amazon-vpc.html

Virtual Private Cloud는 사용이 간편한 AWS 네트워크 생성 및 관리도구이자 클라우드 인프라 관리 도구.  
VPC를 통해 인스턴스를 다른 환경 요소와 쉽게 격리. 개별 프로젝트마다 새로운 VPC 환경 생성해서 사용하게 될 것이다.   
ex. 초기 앱 개발 단계에서 하나의 VPC 생성, → 베타 버전용, 최종 상용화 버전용 VPC 생성해서 프로젝트를 관리.

VPC를 추가하더라도 NAT 게이트웨이 or VPN에 연ㄴ결하지 않으면 별도의 비용이 발생하지 않음. 

**테넌시**

EC2 인스턴스 론칭할 때 테넌시 모델(tenancy model) 선택.  
기본 설정은 공유 테넌시(shared tenancy), → 인스턴스 하나의 물리적 서버에서 다른 인스턴스와 동시에 실행되고 있음을 의미. 다른 인스턴ㄴ스는 AWS 다른 사용자가 운여하는 가상 서버 의미.  
가상의 공간에 원격으로 존재하는 서버 간에 보안 규정에 맞지 않는 상호작용이 발생할 가능성 존재.

보안 요구 수준이 높은 기업 및 기관의 경우 외부 환경과 완전히 격리된 상태에서 인스턴스를 운영.  
→ 물리적으로 격리된 전용의 서버를 제공하는 전용 인스턴스(Dedicated Instance) 옵션 선택.  
전용 인스턴스는 다른 고객 계정과 서버 인프라 및 리소스 공유 환경에서 사용X  
전용 호스트(Dedicated Host) 옵션은 좀 더 엄격한 보안 규정 및 라이센스 요구 사항을 준수해야 하는 경우 적합, 전용 물리적서버를 할당받아 사용

전용 인스턴스 및 전용 호스트는 공유 테넌시 인스턴스에 비해 높은 비용 발생.

## 인스턴스 동작 환경설정

인스턴스 환경설정 구성에 포함된 사용자 data를 이용해서 부팅 작업 등 EC2 초기 실행 작업을 변경.  
이작업은 콘솔 환경설정 또는 AWS CLI의 —user-data로 지정, → 원하는 내용의 스크립트 파일을 적용. 부트스트랩(bootstrap)을 위한 사용자 data는 웹 서버 설치 및 웹 루트 구성을 위한 간단한 몇 개의 명령문으로 이뤄진 경우, Puppet Enterprise  플랫폼 기반 작업 노드로 사용 → 매우 세심하게 작성된 스크립트인 경우.

## 플레이스먼트 그룹

AWS 인스턴스는 기본적으로 서버 인프라를 다양한 목적에 광범위하게 사용될 수 있도록 설계, 기업 및 부서 상황에 따라 인스턴스 요구사항 다른 경우 있음.  
EC2 플레이스먼트 그룹(Placement Groups) 사용자의 니즈 반영한 서버 프로필을 정의할 수 있는 도구.

세 가지 플레이스먼트

- **클러스터(Cluster)  플레이스먼트 그룹**
    
    근거리에 위치한 단일 AZ에 연관된 인스턴스를 론칭.  
    전송 지연 수준이 낮은 상호연결형 네트워크를 제공, 고성능 컴퓨팅(HPC) 애플리케이션 적합
    
- **스프레드(Spread) 플레이스먼트 그룹**
    
    data 소실 및 서비스 실패와 같은 위험을 감소시키기 위해 다수의 AZ 사용, 서로 다른 HW 랙에 인스턴스를 분산 배치.  
    → 환경설정은 동시다발적인 실패 상황에 대체할 수 있다는 점에서 유용성이 높음, VMware의 DRS(Distrbuted Resource Scheduler)와 유사한 기능을 제공
    
- **파티션(Partition) 플레이스먼트 그룹**
    
    연관 인스턴스를 하나의 파티션으로 묶어 사용할 수 있는 파티션에 속한 인스턴스는 다른 파티션의 인스턴스와 물리적으로 분리해서 배치할 수 있음.  
    스프레드 그룹에 속한 인스턴스는 동이랗ㄴ 물리적 서버를 공유하지 않는다는 점에서 파티션 그룹과 차이.
    

## 인스턴스 가격 모델

EC2 인스턴스는 온디맨드, 예약, 스팟, 등 세 가지 가격 모델 가운데 하나를 구매해 사용.  
12개월 이내의 기간 동안 항상 서버를 운영할 계획, 온디맨드 모델을 구매해서 인스턴스 실행 시간당 비용을 지불. 온디맨드 모델은 필요에 따라 인스턴스를 시작 및 중단시킬 수 있음,  EC2 인스턴스를 사용하기 위한 가장 유연한 방법. 시간당 비용은 가장 비싼 모델.

1년 이상의 기간 도안 항상 서버를 운영할 계획 → 1~3년 단위로 갱신할 수 있는 예약 인ㄴ스턴스를 구매, 큰 폭의 할인 혜택을 받을 수 있음.  
예약 인스턴스에 대한 전체 비용을 일시에 지불하거나, 기간 내 점증형으로 비용르 부담하거나 or 일부는 일시불로 나머지는 월별 비용으로 낼 수 있음. 전체 비용을 월별로 나눠서 부담.  
가격 모델간의 비용 차이를 보여준다. Linux 기반 인스턴스를 기본 테넌시 모델로 사용하며 연간 비용을 한 번 지불할 때.

| 인스턴스 타입 | 가격 모델 | 시간당 비용 | 연간 비용 |
| --- | --- | --- | --- |
| t2.micro | 온디맨드 | $0.0116 | $102.00 |
| t2.micro | 예약(3년) |  | $43.80 |
| g3.4xlarge | 온디맨드 | $1.14 | $9.986.40 |
|  | 예약(3년) |  | $5.089.56 |

고성능의 인스턴스가 필요한 경우,  
Amazon의 스팟 인스턴스가 비용을 절감하는데 도움을 줌.  스팟 인스턴스를 구매하려면, 특정 리전의 인스턴스에 최고가 입찰 뒤, 입찰한 가격 또는 그 이하의 가격으로 시간 단위로 사용할 수 있음, AMI 또는 직접 설정한 론치 템플릿 기반의 인스턴스에 댛나 여러분의 시간당 최고 입찰가를 넘어서 또 다른 입찰자가 나타나기 전까지 사용.

하나의 애플리케이션 인프라 구현에 다수 가격 보델을 결합해서 사용할 수 있다.  
ex. 온라인 쇼핑몰 구현 시, 일상적인 고객 요구 사항은 예약 인스턴스로 처리, 할인 이벤트 등 트래픽 급증할 때는 온디맨드 인스턴스 기반의 오토스케일링 기능을 ㅏㅅ용

## 인스턴스 생애주기

EC2 인스턴스 실행 상태는 다양한 방식 관리.  
인스턴스를 종류. 서버 기능이 중지되고 관련 리소스 AWS 리소스 풀 속 재할당

“주의” - 인스턴스를 종료하면 대부분의 경우 1차 스토리지에 저장된 모든 data 삭제. 하지만 EBS 불륨을 스토리지로 사용하는 경우 인스턴스가 종료돼도 불륨 내 data 유지

인스턴스가 당장 필요하진 않음 인스턴스 종료 원치 않는 경우 중지시켰다가 필요할 때만 다시 시작해서 비용을 아낄 수 있다.  

인스턴스 중지 시 EBS 불륨의 data 유지되지만 인스턴스 스토어 불륨의 data는 유실되나든ㄴ 차이점이 있다

인스턴스 중지후 쟂시작 시 비지속성 퍼블릭 IP 주소는 다른 새로운 조수로 대체되므로 영구적이며 짓고성이 있는  IP 주소가 필요한 경우, 일래스틱 IP 주소를 할당받아 인스턴스에 연결

인스턴스의 시큐리티 그룹 정책은 언제든 업데이트

워크로드의 성능 요구 수준에 따라 기준의 인스턴스 타입을 변경.  
컴퓨트, 메모리, 스토리지 용량을 업그레이드할 수 있음.  
인스턴스 타입을 변경할 때는 먼저 인스턴스를 중지시키고 변경 사항을 적용한 뒤 다시 시작.

## 리로스 태그

AWS 계정에 다수 리소스 배포, 각종 서비스와 리소스에 대한 관리가 점점 어려움.  
EC@ 인스턴스와 그 속한 스토리지, 시큐리티 그룹, 일래스틱 IP 주소 등이 많아질수록 VPC 수와 연결 방식 또한 세분화 복잡함.

→ 리소스 관리가 복잡해진다면, 리소스의 목적 및 다른 리소스와의 관련성 기준으로 나름의 식별 체계를 갖추는 것이 중요. → 가장 좋은 방법 중 하나는 일관도니 명명 규칙을 지닌 태그를 부여

EC2뿐 아니라 AWS 계정으로 접근할 수 있는 거의 모든 요소 AWS 리소스 태그 붙일 수 있음, 하나의 태그는 키와 연관 값으로 작성.

ex. 상용 서버 배포 후 각 서버에 production-server라는 키 부여. 키에 대응하는 값으로 server1, server2 순으로 태그를 추가해 나갈 수 있음.  
사용 서버 연결된 시큐리티 그룹의 경우 production-server라는 키는 동일하게 유지하고 값만 security-group1로 작성

| 키(Key) | 값(Value) |
| --- | --- |
| production-server | server1 |
| production-server | sever2 |
| production-server | security-group1 |
| staging-server | server1 |
| staging-server | sever2 |
| staging-server | security-group1 |
| test-server | server1 |
| test-server | security-group1 |

태그를 적절히 사용, 리소스의 가시성 높일 수 있고, 좀 더 쉽게 효과적으로 리소스 관리. 또한 감사 업무 및 비용 관리 업무 도움 되며, 무엇보다 복잡한 상황에서 발생 오류 줄일 수 있음.

## 서비스 제한 사항

각 AWS 계정은 서비스 별로 론칭할 수 있는 인스턴스의 수에 제한 있음.  
→ 제한은 개별 리전마다 존재하기도 하고, 글로벌 리전에 공통적으로 존재

ex. 사용자는 리전 당 5개 VPC 생성할 수 있음, 하나의 게정으로 5,000개의 SSH  키 사용.  
→ 제한을 넘어 리소스가 필요, AWS 측 제한 상향 요청 가능

# EC2 스토리지 불륨

AWS 공식 문서에서 스토리지 불륨으로 지칭하는 스토리지 드라이브 물리적인 저장 장치를 가상화한 가장 대표적인 사례 중 하나

AWS 스토리지 불륨은 인스턴스 실행되는 OS 저장한다면 측면 기존의 물리적인 스토리지와 별 차이가 없어 보임  
but.  AWS 사용목적에 따라 다양한 불륨을 제공, 인스턴스를 잘 활용하기 위해 이들 불륨의 특징과 각각 장단점 이해 필요

## EBS 불륨

하나의 인스턴스에는 다수의 Elastic Block Store를 부착할 수 있음.  
→ 스토리지 불륨은 기존의 물리적인 서버에 있는 하드 드라이브, 플래스 드라이브, 또는 USB 드라이블처럼 사용. 또한 다른 물리적인 들아ㅣ브와 같이EBS 불륨은 유형별로 성능과 비용 측면에서 차이남.

AWS SLA에서 EBS 불륨에 저장된 data의 신뢰성은 최소 99.99% 이르므로 작동 실패를 걱정할 필요 없음. 

but. 만에 하나 EBS 불륨이 작동에 실패, data 이미 중복 구현된 다른 스토리지에 저장돼 있다가 어느새 복구 → 스토리 실패에 대한 걱정 없이  data 좀 더 신속하고 효율적으로 접속할 방법 고민

스토리지 활용과 관련 한 가지 더 기억 사항은 스토리지 생애주기에 대한 전반적인 관리에 대한 내용.  
불륨에는 시간에 따라 변경되는 중요한 data가 포함. Amazon의 EBS Data Lifecycle Manager 이용 EBS 기반 스냅샷 및 AMI의 생성, 유보, 삭제 등을 자동화 할 수 있는 정책 작성

https://docs.aws.amazon.com/ko_kr/ebs/latest/userguide/ebs-volume-types.html

## EBS 프로비전 IOPS SSD

애플리케이션 실행에 고도의 I/O 작업이 필요한 경우, 프로비전 IOPS(Provisioned IOPS)SSD 타입 사용

io1, io2, 그리고 io2 Blook xpress 등 세 가지 타입이 제공, io1은 50 IOPS/GB, 최대 64,000 IOPS 성능을 제공, AWS Nitro 호환 EC2 인스턴스에 부착 경우, 최대 처리용량은 불륨당  1.000MB/s 이름.  
io2 500 IOPS/GB 성능 제공, io2 Block Express는 4,000MB/s 처리용량과  최대 256,000 IOPS의 성능을 제공

## EBS 범용 SSD

서버 워크로드 고려, 저지연성 및 범용성을 지닌 범용(General-Purpose)SSD 타입 적합

범용 SSD 타입은 최대 3,000 IOPS 성능 제공.  
범용 SSD 타입으로 불륨당 3,000 IOPS 읽기 및 쓰기 작업을 처리, 매일 하나 스냅샷을 생성, Linux 인스턴스를 위해 8GB 부트 드라이브를 사용 경우, 월간 $3.29 비용 발생

## HDD 불륨

대량 data 처리할 필요 없거나 신속한 data 입출력이 필요 없는 경우, 하드 드라이브 기반 불륨 ㅏㅌ입을 선택해서 비용 절감. EBS 중 가장 저렴한 sc1 타입의 경우 월간  $0.15/GB 비용 발생

st1 타입은 처리량 최적화(throughput opimized) 하드 드라이브 불륨으로도 부름. TB 당 250MB/s 속도로 data를 처리, sc1 타입에 비해 저장 용량은 좀 더 크고, 접속 빈도가 높지 않은 경우 적합.  
EBS Create Volume 화면에서 Magnetic(Standard) 불륨 타입도 제공 있음.

## EBS Volume 특징

EBS 불륨은 스냅샷 생성 방식으로 복제, 기존의 스냅샷으로 다른 인스턴스에 부착할 수 있는 불륨을 만들거나, AMI 생성을 위한 이미지로 변환할 수 있음.  
또한 EBS 불륨이 부착된 채 실행 중인 인스턴스르 ㄹ이용 직접 AMI 이미지를 생성.  
→data 손실 문제 겪지 않으려면 해당 인스턴스 먼저 중지

EBS 불륨은 저장 중 EC2 호스트 인스턴스 이동 중 data 보호 위해 암호화

암호화 키는 EBS 자동으로 관리하거나 AWS Key Management Service를 통해 사용 및 관리

## 인스턴스 스토어 불륨

EBS 불륨과 달리, 인스턴스 스토어 불륨은 비지속형(ephemeral) 스토리지, 인스턴스 종료, 인스턴스 스토어 저장된 data 소실. 지속형 스토리지인 EBS 놔두고 인스턴스 스토어 사용하는 이유

- 인스턴스 스토어 불륨은 인스턴스 서버 호스팅 시 물리적으로 부착되는 SSD 저장 장치, NVMe(Non=Volatile Memory express) 인터페이스 연결
- 인스턴스를 생성 자동적 인스턴스 스토어 불륨이 생성되며 별도의 비용 부담
- 인스턴스 스토어 불륨은 단기적인 목적으로 인스턴스를 시작하는 배포 모델에 적합, 외부에서 data를 임포트해서 사용하므로 내부에 저장된 data는 작업 후 삭제돼 무방

하나의 인스턴스에 다수의 인스턴스 스토어 불륨을 추가하려면 그에 적합한 인스턴스 타입부터 선정, → 배포 모델 설계 시 매우 중요한 고려사항

EC2 관련된 data 방대한 경우 EC2 외부 해당 data 저장, EBS 인스턴스 스토리지의 필요성은 낮음. 상당수의 기업 고객은 EC2 생성 data를 Amazon S3 저장해 비용을 회기적으로 낮추거나 컴퓨팅 작업에 상관 없이 언제든 사용할 수 있는 DB 관련 내용 저장.

인스턴스 재부팅에도 data 소실되지 않게 하거나 AMI 생성된 그대로 인스턴스 사용 경우, EBS 불륨이 좀 더 나은 선택.  
반면 시스템 실패나 재부팅으로 인한 data 소실 가능성 고속의 data 입출력 및 처리가 중요한 경우, 인스턴스 스토어 좋은 대안. 또한 탁우러한 수준으로 읽기/쓰기 작업을 할 필요 없음.  
EC2 전용 스토리지를  고수할 필요 없음, S3 비용도 절약하고 좀 더 융통성 data 관리

# EC2 인스턴스 접속

다른 네트워크 디바이스 EC2 인스턴스도 유일한 IP주소로 네트워크 상 위치 표시  
모든 인스턴스는 최소 하나 이상의 프라이빗 IPv4 주소를 지님

| 첫 번째 주소 | 마지막 주소 |
| --- | --- |
| 10.0.0.0 | 10.255.255.255 |
| 172.16.0.0 | 172.31.255.255 |
| 192.168.0.0 | 192.168.255.255 |

인스턴스를 생성 서브넷 내에서만 인스턴스를 연결, 인터넷과 인스턴스를 바로 연결X.  
인스턴스를 외부 리소스와 연결 위한 다중 네트워크 인터페이스(multiple network interfaces)  환경설정 인스턴스에 하나 이상의 가상 네트워크 인터페이스를 부착 이들 인터페이스는 기존의 서브넷 또는 시큐리티 그룹과 반드시 연결, 필요에 따라 서브넷 범위 내 정적 IP 주소 할당 사용

인터넷 연결 위해 인스턴스에 퍼블릭 IP를 할당 사용.  
인스턴스 생애주기 부분에서 언급된, 인스턴스 할당된 기본 펍르릭 IP는 비지속형 주소로서 재부팅을 하면 변경.  
→ 인스턴스 배포 후 장기적, 안정적으로 사용 일래스틱 IP 할당받음 사용하는 경우 많음, 실행중인 인스턴스에 부착하면 별도의 비용 부담 없이 일래스틱 IP 사용

보안은 고려한 상태 어드민 자격으로 인스턴스에 접속할 수 있는 방법은 잠시 후 설명.  
일단 메타data 시스템을 통해 IP주소를 연결,  EC2 인스턴스 실행 방법

인스턴스에 로그인한 상태 아래curl 명령 실행

`$ curl http://169.254.169.254/latest/meta-data`

`ami-id`

`ami-launch-index`

`ami-manifest-path`

`block-device-eapping/`

`hostname`

`instance-action`

`instance-id`

`instance-type`

`local-hostname`

`local-ipv4`

`mac`

`metrics/`

`network/`

`placement/`

`profile`

`public-hostname`

`public-ipv4`

`public-keys/`

`reservation-id`

`security-groups`

---

cur1 명령 실행 시 슬래시 기호 끄타는 요소 뒤에 추가 정보 입력 좀 더 상세한 하위 정보 얻을 수 있음. cur1  명령 data 타입을 추가, 찾으려는 정보 얻을 수 있으며, 위 예제 코드 실행시 시큐리티 그룹과 관련 다음과 비슷한 결과 나타남

`$curl http://169.254.169.254/latest/meta-data/security-groups launch-wizard-1`

# EC2 인스턴스 보안 유지

EC2 대한 비인가 접근 막기 위한 적절한 효과적인 보안 환경설정.  
AWS EC2 보안 위해 시큐리티 그룹, IAM 롤, NAT 인스턴스, 키 페어 등 네 가지 도구 제공

## 시큐리티 그룹

EC2 시큐리티 그룹은 방화벽과 같은 역할, 인스턴스로 향하는 모든 유입 트래픽은 거부, 인스턴스에서 나가는 모든 유출 트래픽은 허용. 그룹 동작은 특정 트래픽은 거부 또는 허용과 관련 정책 규칙 정의, 그룹 동작 정의 후 유입 및 유출되는 트래픽에 대한 처리 모두 정책 규칙을 따름

인스턴스와 관련 트래픽 소스 및 목적지를 통해 검증, 타겟이 되는 네트워크 포트와 미리 설정된 프로토콜을 사용.   
ex. TCP. 패킷이 SSH 포트 22로 전송, 소스 IP 주소가 사무실의 컴퓨터와 연결된 로컬 퍼블릭 IP와 일치할 때만 해당 인스턴스에 아무런 제약 없이 SSH 접근 허용, → 보안 문제 일으킴

시큐리티 그룹을 이용 간단한 방법 여러분 서비스 대한 세심한 접속 규칙 추가.  
ex.  시큐리티 그룹을 이용 웹사이트를 전세계 접속 하되 어드민 멤버 외 백엔드 서버에는 접속하지 못함 필요 다라 시큐리티 그룹 규칙 갱신 다수의 인스턴스 동시 적용

## IAM 롤

IAM 롤을 이용 EC2 인스턴스는 물론 다른 AWS 리소스 대한 접속 제어, AWS 게정으로 연결된 특정 서비스와 리소승 대한 동작을 허용 방식 IAM 롤정의. 특정 롤을 유저 또는 리소스에 할당, 롤 정책에 포함된 리소스 접근 권한 얻음

롤은 이요해서  EC2 인스턴스 등 대한 베타적인 접근 권한 유저 또는 리소스 등, 일정 수의 개체에만 부여, EC2 인스턴스 IAM 롤을 할당 RDS 등 외부 해당 인스턴스 접근 DB 업무 처리하도록 할 수 있음.

## NAT 디바이스

중요한 업무 처리하는 EC2 인스턴스의 경우, 네트워크 경우, 네트워크 보안 유지를 위해 퍼블릭 IP주소, → 인터넷으로 접근할 수 없도록 설정, but. 해당 서버에 대한 보안 패치, SW 업데이트 등 업무 위한 인터넷 접속도 차단 운영상 문제

NAT(Network Address Translation) 디바이스 이용 인터넷 연결 허용 없이 프라이빗 IP 주솔르 통해 인터넷 접속.  
AWS 제공하는 NAT 디바이스는 NAT 인스턴스와 NAT 게이트웨이 두 가지.  
모두 원달위로 과금, 문제를 해소할 수 있는 적절한 기능 제공, NAT 게이트웨이 관리형 서비스로서 좀 더 많은 편의 제공 사용 권장.

## 키 페어

경험 많은 어드민 인스턴스에 대한 원격 로그인 세션 반드시 암호화 방식 연결, 같은 보안 세션 실행의 방법, 사용자는 EC2 인스턴스 생성 시 키 페어를 생성, 퍼블릭 키는 EC2 서버, 프라이빗 키는 로컬 머신에 저장한 뒤 사용.  
Windows AMI 사용, Linux AMI 사용 경우 프라이빗 키 이용 SSH 세션 실행

사용자 AWS가 생성한 키 페어 인스턴스 시작 리전 유지, 삭제 전까지 다른 새로운 인스턴스에도 적용 가능.  
퍼블릭 키를 분실, 키가 외부 노출된 경우 AWS 해당 키 페어 삭제 다시 생성. 키 페어 인스턴스 관리 매우 중요한 부분이므로 각별히 주의

# EC2 Auto Scaling

EC2 Auto Scaling 애플리케이션 실패 및 복구 상황 방지 위한 서비스, 실패 상황 발생시 사용자 미리 지정한 수만큼의 EC2 인스턴스를 프로비저닝하고 시작, 요구 수준 맞춰 인스턴스 수를 동적 추가, 인스턴스 실패 또는 예기치 못한 종료 발생 시 Auto Scaling 자동으로 해당 인스턴스를 대체

EC2 Auto Scalin은 론치 환경설정 또는 론치 템플릿 이용 시작할 인스턴스의 환경을 자동으로 설정, 인스턴스 기본 환경설정 피라미터 정의 및 론치 시점에 필요한 스크립트를 준비.  
일정 시간동안 AWS 써봤다면 론치 환경설정이 좀 더 익숙 느껴짐, 기존 AWS 환경설정과 유사점도발견

론치 템플릿은 론치 환경설정 비해 좀 더 최신 기술 반영, AWS 론치 템플릿 사용 권장.  
론치 환경설정 또는 론치 템플릿 중 어느 것을 선택할 지 여부 본인에게 달림.  
AWS 공식적으로 론치 템플릿 사용 권장, 론치 환경설정은 사용하지 않음 제안

## 론치 환경설정

인스턴스 직접 생성 경우 AMI, 인스턴스 타입, SSH 키 페어, 시큐리티 그룹, 인스턴스 프로파일, 블록 디바이스 맵핑, EBS 최적화 여부, 플레이스먼트 테넌시, 앱 설치 및 환경설정을 위한 커스텀 스크립트 등 유저 data 포함한 다양한 환경설정 파라미터를 지정

론치 환경설정은 인스턴스를 직접 프로비저닝할 대 지정하는 것과 동일한 정보를 담은 문서. Auto Scaling은 인스턴스 설정 내용을 복사 사용, 필요 따라 관련 내용을 수정. 론치 환경설정은 기존 EC2 인스턴스의 설정 내용 복사 생성 처음부터 새롭게 작성

론치 환경설정은 EC2 Auto Scaling만 사용, 론치 환경설정만 가지고 직접 인스턴스를 론칭, 또한 한 번 론치 환경설정을 생성하면 수정, 설정 내용 중 수정 필요한 경웨 새 론치 환경설정을 생성

## 론치 템플릿

론치 템플릿은 설정 방식 측면 론치 환경설정과 유사 론치 템플릿의 사용 방식이 좀 더 직관적 이해.  
론치 템플릿 Auto Scaling 작업시 사용 EC2 인스턴스 사본 생성 또는 스팟 플릿 생성의 목적으로도 사용

론치 템플릿은 버전 기능을 제공하므로 템플릿 생성 후 내용 변경 가능, 수정 론치 템플릿은 새 버전으로 템플릿 목록 추가.  
AWS 모든 론치 템플릿 버전 목록을 관리 필요 따라 원하는 버전 사용, 론치 템플릿 변경 이력을 추적할 수 있어 편리.

## Auto Scaling 그룹

Auto Scaling 그룹은 Auto Scaling이 관리 EC2 인스턴스 그룹, Auto Scalilng 그룹 생성에 앞서 론치 템플릿 생성

### Load Balancer 설정

Auto Scaling 그룹 인스턴스 유입 트래픽 분산시키려는 경우,  
로드 밸런서를 설정, Auto Scaling 그룹 생성 시 로드 밸런서 타겟 그룹 연결

### 애플리케이션 인스턴스에 대한 헬스 체크

Auto Scaling 그룹 생성하면 미리 정한 최소 또는 희망 용량 인스턴스가 항상 유지, 생성된 인스턴스의 헬스 상태가 좋지 못함 Auto Scaling  → 새 인스턴스로 대체

Auto Scaling 인스턴스 헤스 대한 판단 기준 EC2 헬스 체크 따르며 EC2 자동화된 시스템 및 인스턴스 상태 체크 방법대해 알아봄.  
헬스 체크를 통해, 메모리 고갈, 파일시스템 오류, 네트워크 연결 오류, 시작 환경설정 오류는 물론, AWS 처리해야하는 시스템 문제 여부 확인

→ 애플리케이션 특화된 문제점은 발견 못함

ALB 이용해 인스턴스의 트래픽 라우팅, 로드 밸런서 타겟 그룹에 대한 헬스 체크 환경설정을 할 수 있음. 타겟 그룹의 헬스 체크는 HTTP 응답 코드 200~ 499 확인 할 수 있음  
Auto Scaling 그룹 환경설정을 통해 헬스 체크 확인 결과를 인스턴스상태 모니터링에 반영 결정

인스턴스 ALB 헬스 쳌 실패, 로드 밸런서는 해당 인스턴스 대한 트래픽 전송 중단, 인스턴스를 삭제 및 다른 인스턴스로 대체 ALB 타겟 그룹 새 인스턴스 추가한 뒤 새 인스턴스에 트래픽 전송

## 스케일링 정책 설정

Auto Scaling 그룹 생성 시, 론치 환경설정 또는 론치 템플릿으로 몇 개의 인스턴스를 프로비전하고 실행할 것인지 지정.  
Auto Scaling 그룹 최소 및 최대 용량 지정.  
Auto Scaling 그룹 생성 시, 희망하는 인스턴스의 수를 지정하는 것.

**최소 용량(minimum)**

Auto Scaling은 인스턴스의 수가 최소 크기 이하로 내려가지 않도록 하며, 값을 0을 설정, Auto Scaling은 새 인스턴스를 추가 않고 그룹 내 실해오디는 모든 인스턴스 종료

**최대 용량(Maximum**

Auto Scaling은 인스턴의 수가 최대 크기 이상이 되지 않도록 하며, 예산 제한선 고려해 예기치 못한 수요에 의해 지나치게 많은 인스턴스가 추가되지 않도록 하는 안전장치 역할

**희망 용량(Desired Capacity)**     

희망용량은 사용자의 필요에 따라 선택적 입력 할 수 있음, 최소 및 최대 크기 범위 이내 있어야함.  
희망 용량을 입력하지 않으면 Auto Scaling은 최소 크기에 맞춰 인스턴스를 론칭, 희망요량 입력, 해당 값 맞춰 인스턴스 추가 또는 종료

ex. 최소 용량 1, 최대 용량 10, 희망 용량 4로 설정한 경우 Auto Scaling은 네 개의 인스턴스를 생성.  
→ 누군가의 실수 똔느 호스트 오류로 이들 인스턴스 중 하나가 종료, Atuto Scaling은 희망 용량 4에 맞춰 새 인스턴스를 자동 추가,  
웹 콘솔에서는 희망 용량 그룹 사이즈로 부름

## Auto Scaling 옵션

Auto Scaling 그룹 생성 후, 최소 또는 희망 용량으로 유지되도록 내버려두는 방법, 유지라는 방법은 Auto Scaling 여러 방법 중 하나일 뿐이다.  
Auto Scaling은 요구 수준에 맞춰 다양한 인스턴스 스케일링 옵션 제공

### 수동 스케일링(Manual Scaling)

Auto Scaling 그룹 생성 후 최소, 희망, 최대 용량 값을 변경, 해당 내용이 즉시 반영. ㅑ 
희망 용량을  2에서 4로 변경 Auto Scaling은 즉시 2개의 인스턴를 추가, 이미 4개의 인스턴스가 있는 상황에서 희망 용량을 2로 변경 Auto Scaling 즉시 2개의 인스턴스를 종료.  

### 동적 스케일링 정책(Dynamic Scaling Policies)

S3, 로드 밸런서, 인터넷 게이트웨이, NAT 게이트웨이 등 대부분 AWS 관리형 리소스 탄력적.  
또한 워크로드가 증가하면 자동으로 성능 또는 용량을 스케일업하며, → 서비스 대해서는 트래픽이 아무리 급증해도 AWS가 그에 대응해서 리소스 추가.  
but. EC2 인스턴스의 경우 요구 수준 맞는 성능 또는 용량을 설정하는 것은 사용자 책임

CPU 활성화율, 메모리, 디스크 공간 등 인스턴스 리소스의 고갈은 인스턴스 가동 실패로 이어질 수 있으므로 사용자는 동적 스케일링 정책을 통해 중단 임계치에 도달 하기 전 인스턴스의 부담을 줄여줌.  
Auto Scaling은 → 그룹에 포함된 모든 인스턴스 대해 다음과 같은 성능 지표 제공

- 누적 CPU 활성화율
- 타겟 당 누적 요청 회수
- 누적 네트워크 바이트-인
- 누적 네트워크 바이트-아웃

지표 외 다양한 성능 지표를 확인, CloudWatch 로그 추가 지표 필터링,  
ex. 애플리케이션이 하나의 프로세스를 처리하는데 걸린 시간을 측정 로그 생성, → 이용해서 하나의 프로세스 처리 시간이 너무 오래 걸린다면 Auto Scaling 통해 새 인스턴스 추가

동적 스케일링 정책은 CloudWatch 경고 상황 모니터링 결과 따라 희망 용량을 증가 시키는 방식으로 작동, 단순 정책, 단계별 정책, 타겟 추적 정책 세가지

### 단순 스케일링 정책

단순 스케일링 정책(Simple Scaling Policies) 지표 한계치에 도달하면 Auto Scaling 희망 용량대로 인스턴스를 증가, → 타입에 따라 증가 수준 또는 속도 조절

**ChangelnCapacity**

지정 숫자만큼 희망 용량 증가.  
ex. 희망 용량을 4로 설정 뒤 Auto Scaling 지정 숫자인 2씩 증가 나가는 방식

**ExactCapacity**

현재 값 상관 없이 용량 지정 숫자만큼 증가.  
ex. 희망 용량은 4로 설정 이번 정책을 통해 6으로 증가

**PercentChangelnCapacity**

현재 용량의 비율을 기준 증가.  
희망 용량이 4인데 이번 정책 50% 설정, Auto Scaling 적용되는 총 희망 용량은 6

ex. 이미 4 인스턴스를 보유, PercentChangelnCapacity 속성 값 50% 단순 스케일링 정책을 생성,  
Auto Scaling 희망 용량에 2를 추가, Auto Scaling그룹에는 총 6개의 인스턴스 존재

Auto Scaling 조정 작업 종료 후 관련 정책 다시 실행하기 전 휴식기(cooldown period) 갖게  
기본 휴식기는 300초, 0으로 설정 휴식기를 갖지 않도록 할 수 있음.  
인스턴스 헬스 상태가 좋지 않은 경우, Auto Scaling은 휴식기 없이 해당 인스턴스 교체

스케일링 조정 작업이 끝나고, 휴식기도 종료, 성능 한계치 미만에 있는 상황에서의 희망 용량이 6이라고 가정.  
알람이 울리면 단순 스케일링 옵션은 3개의 인스턴스 추가.  
단, Auto Scaling 결코 그룹 최대 용량 벗어남 인스턴스 증가 시키지 않음

### 단계별 스케일링 정책

애플리케이션 대한 요구 수준 급속히 증가할 경우, 단순 스케일링 정책만으론 수요 적절히 대응, 단계별 스케일링 정책(Step Scaling Policies)을 통해 리소스 사용량의 누적 지표 따라 인스턴스를 추가  
ex. 4개 인가. CPU 활성화율이 50% 초과, 2개 추가, 60% 초과하면 4개를 추가 방식

CloudWatch Alarm 평균 CPU 활성화율 50% 경고를 보내도록 했다면 → 이용해서 단계별 희망 용량 증가. 단계별 스케일링 정책을 작성할 때 최소 한 단계에 해당하는 조정 값 또는 범위를 지정.  
단계별 조정값.

- 하위 경계
- 상위 경계
- 조정 타입
- 희망 용량 증가 기준

상위 경계 및 하위 경계는 단계별 조정 업무 수행 지표의 범위를 정의.  
초기 단계를 하위 경계 50. 상위경계 60으로 설정, ChangeInCapacity 조정값 2로 설정,  
알람 발령시 Auto Scaling 평균 CPU 활성화율 기준으로 조정에 나선다.

ex. 평균 활성율이 55%라면 55가 하위 경계 50, 상위 경계 60 범위 Auto SCaling은 희망용량에 2 추가

하위 경계 60, 상위 경계 무한으로 설정 ChangeInCapacity는 4인 경우,  
평균 CPU 활성화율이 62% Auto Scaling의 ‘60 ≤ 62 < 무한’ 조건 만족하므로 희망 용량에 4를 추가.  
CPU 활성화율 60% 어떻게 될까? 단계별 숫자 범위는 겹칠 수 없음, 60% 하위 징계와 겹치므로 희망 용량에는 변화 없음

단계별 스케일링 정책, Auto Scaling 새 인스턴스 추가 위해 대기하는 시간인 준비기(warm-up time) 지정, 기본 웜업 타입은 300초. 단계별 스케일링 정책에서는 휴식기는 갖지 않음

### 목표 추적 정책

단계별 스케일링 정책이 너무 복잡해 보인다.  
목표 추적 정책(Target Tracking Policles)을 사용. 특정 지표와 티겟 값을 선택, Auto Scaling이 CloudWatch Alarm 생성, 인스턴스 개수 조정 위한 스케일링 정책 생성 등 제반 업무 처리

선택한 지표는 인스턴스에 추가되는 업무 부하와 비례적으로 변경, 그룹별 평균 CPU 활성화율, 타깃별 요청 회수 등이 해당. ALB에 대한 총 요청 수와 같은 누적 지표는 업무 부하와 비례적으로 변경 목표 추적 정채의 지표로는 적합

목표 추적 정책에서는 용량을 증가 스케일아웃(scale out) 정책은 물론, 용량을 감소시키는 스케일인(scale in) 정책 추가. 스케일인 정책을 원치 않는 경우 스케일인 정책을 비활성화 시킴.  
또한 목표 추적 정책 단계별 스케일링 정책처럼 준비기를 설정할 수 있다.

### 예약된 작업

예약된 작업(Scheduled Actions) 워크로드 패턴이 예측 가능한 경우 용량 변화에 선제적으로 대응해 수요 증가 이전 충분화 인스턴스를 확보하고자 할 대 유용.

예약된 작업 생성 시, 다음사항 설정

- 최소, 최대, 희망 용량 값
- 시작 날짜 및 시간

반복적 패턴으로 업무를 처리 경우엔  
일정 기간마다 반복되는 정책을 추가할 수 있음, 예약된 정책 삭제 위한 종료 시점 설정

ex. Auto Scaling 그룹을 이용 평소 일주일 두 개의 인스턴스를 실행, 트래픽이 급증하는 금요일엔 네 개의 인스턴스 실행

→ 예약된 작업으로 처리하려면 먼저, 트래픽 급증 상황에 대응하기 위해 매주 금요일 희망 용량을 4로 올리는 정책 생성. 다음, 토요일 희망용량 평소 수준인 2로 되돌리는 정책 추가

같은 예약된 작업 정책은 매주 금요일 자동으로 인스턴스 확장했다가 토요일에 원래 수준의 인스턴스로 축소

동적 스케일링 정책은 몇 개의 예약된 작업을 결합해서 사용하는 것도 가능.  
ex. 온라인 쇼핑몰을 운영, 손님이 몰리는 쇼핑 시즌에는 그룹 크기를 최대 증가시키는 예약된 작업 적용, 상황 따라 희망 용량 증감 시키는 정책 동적 적용

# AWS Systems Manager

EC2 Systems Manager 또는 simple Systems manager(SSM) 알려짐  
AWS Systems manager AWS 리소스 및 온프레미스 서버의 자동 및 수동 작업 관리

운영 측면 Systems Manager는 수작업 및 스크립트 작성 등 필요한 유지보수 작업을 돕는 도구로서 온프레미스와 EC2 인스턴스 패키지 업그레이드, 설치 SW 목록 생성.   
새 애플리케이션 설치 등 어부 돕고, EBS 스냅샷 이용한 AMI 이미지 생성, IAM 인스턴스 프로파일 부착 물론 버킷에 대한 퍼블릭 접근 찯나 등의 업무 수행

Systems Manager 주요 기능 두 가지

- 액션(Actions)
- 인사이트(Insights)

## 액션

액션을 이용 자동 또는 수동 개별적 또는 일괄적으로 AWS 리소스에 대한 각종 작업 수행  
→ 액션은 문서에 미리 정의 돼 있어 하며, 세가지 타입으로 나눔

- **자동화(Automation) 액션**
    
    AWS 리소스 대한 작업 수행
    
- **명령(Command) 액션**
    
    Linux 또는 Windows 인스턴스 대한 작업 수행
    
- **정책(Policy) 액션**
    
    관리중인 인스턴스로부터 목록 data 수집 과정 정의
    

### 자동화 액션

자동화 액션 AWS 리소스 대해 일괄적으로 작업 수행.  
다수 EC2 인스턴스 재시작, CloudFormation 스택 업데이트, AMI 패치 등 작업을 일괄적 처리

자동화 액션을 통해 개별 작업을 세분화 방식으로 처리, 일괄적으로 전체 자동화 업무 처리, 필요한 상황 시점에 맞춰 단계별로 처리. 자동화 액션은 한 번 몇 개의 리소스 처리 대상으로 삼을지 숫자 또는 퍼센트 단위 설정

### Run 명령

자동화 액션 AWS 리소스 대한 작업 수행.  
Run 명령 관리 대상 인스턴스에 대한 작업 수행 도우며, 로그인 없이 접속하거나 커스텀 스크립트 실행 위한 서드파티 도구 실행

Systems Manager는 EC2 및 온프레미스 인스터스 설치된 에이전트 통해 관련 작업 수행.  
Systems Manager 에이전트 Windows Server, Amazon Linux, Ubuntu Server AMI 등에 기본적으로 설치, 다른 EC2 및 온프레미스 인스턴스에는 수동 설치.  
기본적으로 Systems Manager는 여러 인스턴스와 관련된 작업을 할 수 있는 어떤 권한도 지니고 있지 않으므로 먼저 AmazonEC2RoleforSSM 정책 인스턴스 프로파일 롤 추가

AWS는 Linux 및 Windows 인스턴스 위해 사전 설정된 다양한 명령 문서 제공.  
ex. AWS-InstallAppplication 문서는 Windows SW 설치, AWS-RunShellScripot 문서 Linux 인스턴스 임의의 쉘 스크립트를 실행.  
외에 Windows 서비스 재시작 또는 CodeDeploy 에이전트 설치 등 위한 문서도 있음.  
작업 대상 인스턴스는 태그로 필터링하거나 개별적으로 선택, 자동화 옵션 사용, 한 번에 몇 개의 인스턴스 처리할지 선택

### 세션 매니저

세션 매니저는 시큐리티 그룹, NACL 인바운드 포트 개방 없이 혹은 퍼블릭 서브넷 인스턴스를 두지 않고도 LInux와 Windows 인스턴스에 대한 Bash 및 PowerShell 접속 지원.  
베스티온 호스트(bastion host) 설정이나 SSH 키 문제를 걱정할 필요 없음, 모든 Linux 버전 및 Windows Server 2008 R2부터 최신의 2016 지원

세션은 웹 콘솔 또는 AWS CLI 시작, AWS CLI 세션을 시작하기에 앞서 여러분의 로컬 머신에 Session Manager 플러그인 설치.  
Session manager SDK 인스턴스에 연결 커스텀 애플리케이션 개발을 돕는 라이브러리 담고 있음, 시큐리티 그룹이나 NACL 포트를 열지 않고 기존 환경설정 관리 시스템 통합 사용할 수 있어 유용.

Session Manager 이용 연결을 TLS 1.2 보호되며, 모든 로드는 CloudTrail에 저장, 세션에서 실행하는 모든 명령은 S3 버킷에 저장

### 패치 매니저

패치 매니저 Linux 및 Windows 인스턴스 패치 업무 자동화 도구, OS 지원

- Windows Server(2012 이상)
- Ubuntu Server(14.4 이상)
- Debian Server(8.x, 9.x, 10.x)
- Red hat Enterprise Linux(RHEL)
- SUSE Linx Enterprise Server(12.0, 15.0, 15.1)
- CentOS(6.5-7.9, 8.0-8.2)
- Amazon Linux(2012.03-2018.03)
- Amazon Linux 2(2-2.0)
- Raspberry Pi OS(Raspbian 9 Stretch alc 10 Buster)
- Red hat Enterprise Linux(6.5-8.5)
- Oracle Linux(7.5-8.3)
- masOS(10.14x-Mojave 이상)

패치 대상 인스턴스 태그 등을 기준으로 선택,  
패치 그룹을 생성 작업을 진행, 패치 그룹은 Patch Group 태그 키를 지닌 인스턴스 모음

ex. Webservers 패치 그룹 인스턴스 몇 개 포함시키려는 경우 태그 키는 patch Group 태그 밸류 Webservers 입력. → 태그 키는 대소문자 구분한다는 점 주의

패치 매니저는 패치 베이스라인 통해 패치 작업을 수행할 대상 정의, 이후 자동으로 패치 SW 설치하거나 승인 후 설치 작업 진행

AWS 기본 베이스라인을 통해 보안 수준, 민감성, 중요성, 필요성 등을 기준으로 패치 SW 분류.  
패치 베이스라인은 Ubuntu를 제외한 다른 모든 OS 7일후 자동으로 승인 및 설치, → 자동 승인 지연(auto-approval delay)라 부름

어떤 패치가 설치될지 좀 더 세분화해서 관리, 커스텀 베이스라인을 생성.  
커스텀 베이스라인 OS 정의 하나 이상의 승인 규칙 포함, 설치할 패치 분류 및 중요도 수준 구분, 자동 승인 지연 기능을 적용

커스텀 베이스라인 환경 설정 승인된 패치 구체적 설정.  
Windows 베이스라인 경우 knowledgebase 및 security bulletin ID 설정. ID 설정, 전체 패키지 네임 추가. 패치 승인, 여러분이 설정한 유지보수 일정 패치 작업 진행.  
유지보수 일정이 도래하기전에 즉가적으로 인스턴스 대한 패치 작업 실행.  
패치 매니저 패치 작업 수행 위해 AWS-RunPatch Baseline 도큐먼트

### 스테이트 매니저

패치 매니저가 인스턴스에 대한 동일환 패치 수준을 유지 돕는 도구, 스테이트 매니저는 여러분이 정의한 방식대로 SW 가져오고 환경 설정 환경설정 도구.  
스테이트 매니저는 인스턴스에 대해 일회성, 혹은 미리 정해진 일정 따라, 자동으로 명령 및 정책 도큐먼트 실행.  
ex. 스테이트 매니저를 이용 인스턴스에 안티바이러스 SW 설치한 뒤 관련 인벤토리 가져옴

스테이트 매니저를 사용, 우선 실행할 명령 도큐먼트 정의한 연계(association) 객체를 생성 뒤, 전달 파라미터, 타겟 인스턴스, 스케줄을 설정.  
스테이트 매니저 타겟 인스턴스에 대해 온라인으로 즉시 실행, 스케줄 따라 실행

## 인스이트

인스타이트는 AWS 리소스 대한 헬스, 컴플라이언스, 운영 세부 사항 정보를 AWS systems manager라는 단일 영역 집약.  
일분 인사이트는 AWS 리전 내 리소스 모음인 AWS 리소스 그룹 따라 카테고리화 사용자는 태그 키와 태그 밸류 이용 리소스 그룹 정의.  
ex. EC2 인스턴스, S3 버킷, EBS 불륨, 시큐리티 그룹 등, 특정 애플리케이션과 관련 모든 리소스에 동일한 태그 키를 적용.

### 빌트인 인사이트

빌트인 인사이트 Systems Manager 기본적 제공하는 모니터링 내역을 담고 있음.

AWS Config Compliance AWS Config 룰 및 리소스별 컴플라이언스의 적용 받거나, 받지 않는 리소스 그룹 포함된 전체 리소스 수 및 AWS Config가 추적한 환경설정 변경 사항 이력

CloudTrail Evernts 그룹에 있는 리소스, 리소스 타입, 해당 리소스에 대해 CloudTrail이 마지막 기록한 이벤트 보여줌

Personal Health Dashboard 리소스 영향을 미칠 수 있는 각종 이슈에 대한 경고 제공.  
ex. 일부 서비스 API 응답 속도가 가끔씩 느려지는 현상 대한 이슈 제기.  
아울러, 24시간 동안 AWS 파악한 각종 이벤트 수 보여줌

Trusted Advisor Recommendations 트러스티드 어드바이저는 비용최적화, 성능, 보안, 내오류성 등의 측면 AWS 환경 요소 최적화 돕고 적절한 권장안을 제시.  
또한 서비스 제한 수준 80% 초과 내역 보여줌

모든 Bulsiness and Enterprise 지원 고객 Truseted Advisor 확인 서비스 접속 할 수 있고,  
모든 AWS 고객은 보안 확인 서비스를 무료 이용

- S3 버킷에 대한 퍼블릭 액세스.  
특히, 업로드 및 삭제용 액세스 내역
- TCP 포트 1433(MySQL)  및 3389(Remote Desktop Protocol) 당연히 접근 제한 해야하지만 제한 없이 접근 할 수 있는 포트 내역 포함된 시큐리티 그룹
- IAM 유저 생성 여부
- 루트 유저를 위한 MFA 활성화 여부
- EBS 또는 RDS 스냅샷 대한 퍼블릭 액세스

## AWS Systems Manager Inventory

인벤토리 매니저는 OS, 애플리케이션 버전 등 인스턴스의 data수집,  
수집 내역

- OS 이름 및 버전
- 애플리케이션 및 파일네임, 버전, 사이즈
- Windows 업데이트, 롤, 서비스, 레지스트리 밸류
- CPU 모델, 코어, 스피드

AWS-GatherSoftwareInverntory 정책 도큐먼트를 실행 리전별로 생성된 인벤토리 data를 수집할 인스턴스를 선택. 게정 내 모든 인스턴스 선택하거나 태그를 기준 인스턴스를 선택하는 것 가능.  
계정 내 모든 인스턴스를 선택한 경우, 글로벌 인벤토리 어소시에이션(global inventory association), 리전에서 생성한 인스턴스는 자동 해당 인벤토리에 추가.  
인벤토리 수집 작업은 최소 30분마다 이뤄짐

온프레미스 서버 Systems Manager 에이전트 환경설정 하는 경우, 인벤토리 목적별로 리전을 지정.  
다른 리전 또는 게정의 인스턴스로부터 메타 data 수집 경우,  
리전별로 Resource Data Sync 환경 설정 모든 인벤토리 data 하나의 S3 버킷 저장

### 컴플라이언스

컴플라이언스 인사이트 정한 환경설정 규칙 인스턴스 패치 및 상태 관리에 어떻게 적용 있는지 보여줌. 패치 컴플라이언스(Patch compliance) 패치 베이스라인이 적용된 인스턴스 수 및 설치된 패치 세부 정보 보여줌.  
어소시에이션 컴플라이언스(Association compliance)는 패치 작업 성공적 실행된 인스턴스의 수 보여줌

# 컨테이너 실행하기

서버 워크로드 혹은 가상화된 서버 워크로드 언급, 컨테이너 제외하고 얘기할 수 없는 상황.  
과거, EC2 인스턴스 기반의 전통적인 가상 머신 모델이 경이로운 효율성 제공 평가를 받는 시기.  
지금, 인스턴스가 각각 OS 컨러 각종 SW 스택을 장착하고 실행돼야 하는 무겁고, 효율성 떨어지는 컴퓨트 모델로 인식.   
일단 인스턴스 생성된 후 높은 실행 속도 제공, 실행 여부와 상관 없이 항상 일정 수준의 리소스를 점유하고 있다는 면에서 유연성 및 경량화 필요성 제기돼 왔음

반면, 컨테이너 기반의 컴퓨트 모델은 자체 커널이 아닌, 호스트의 커널 공유, 기존 인스턴스 방식보다 훨씬 높은 효율성 제공. 
즉, VM 모델 하나의 큰 바이너리 파일을 관리하는 대신, 컨텥이너 이미지 기반 분산화된 모듈 아키텍처 이용해 로딩 타임을 기준의 수 분에서 수 초 수준으로 줄일 수 있게 됨.  
또한 OS와 각종 SW 필요한 기존 인스턴스와 달리, 컨테이너 바이너리 이미지 생성 위한 (dokerfile과 같은) 텍스트 파일만 관리

컨테이너 개념과 구현 기술은 간단,  
컨테이너란 워크로드 실행 및 연결 위한 호스팅 SW 할 수 있음   
AWS는 Amazon Elastic Container Service(ECS)와 Amazon Elastic Kubernetes Service(Azazon EKS) 두가지의 상용화된 컨테이너 서비스 제공, Elastic Container Registry(Amazon ECR) 컨테이너 이미지 저장소 또는 레지스토리 서비스 제공

## Amazon Eastic Container Service

컨테이너 기술의 가장 큰 장점 중 하나는 컴퓨트 리소스 실행 스크립트화해 좀 더 효율적으로 처리.  
사용자는 수백 또는 수천 개의 컨테이너를 클러스트 형태로 구성 및 시작해 대규모, 복잡한 아키텍처를 성공적으로 구현 실행. 점증하는 워크로드 수요 대해 자동으로 댕으해 배포 컨테이너 수를 늘릴 수 있음. 점증하는 워크로드 수요 대해 자동으로 대응해 배포 컨테이너 수를 늘릴 수 있음. SW 업데이트 또한 실시간으로 이루어짐

but. 컨테이너 수가 증가할수록 적절한 자원 할당 및 네트워크 설정 등의 작업 복잡, → 컨테이너 통합적 관리 및 조율 작업인 오케스트레이션(orchestration) 중요성 커지게 된다. ECS 바로 이와 같은 목적 만들어진 서비스, ECS 대규모 컨테이너 클러스터 실행 위한 서비스, 컨테이너 실행을 위한 인스턴스, 스토리지, 네트워크 리소스의 프로비저닝 관리, 컨테이너 생애 주기 동안 커테이너 모니터링 및 관리 작업 지원

Amazon ECS Anywhere는 ECS 플랫폼 온프레미스 인프라 확장할 수 있도록 지원, 기존 Amazon ECS 환경 사용하던 것과 동일한 API 도구를 이용해 온프레미스 환경에 적합, 일부 워크로드 로컬 환경에 유지해야하는 규제 있는 경우 ECS Anywhere 이용 좀 더 간편하게 하이브리드 환경 구현.  
단, ECS Anywhere 로컬 환경에서만 실행 경우 관련 섭서비스 대한 요금 청구됨

ECS Anywhere 컨테이너 호스팅하려는 로컬 서버에 활성화 키(activation key) 이용해 ECS 및 SSM 에이전트 설치 시작하면 바로 사용 있음

## Amazon Elastic Kubernetes Service

kubernetes(K8s)는 Google에서 오픈소스 컨테이너 오케스트레이션 서비스, 기능과 사용 목적 등 ECS 대체로 비슷하지만 특정 컨테이너 플랫폼에 구애받지 않고 사용   
kubernetes는 글로벌 레벨에서 가장 인기 있는 컨테이너 및 오케스트레이션 도구 중 하나, AWS 포함한 주요 클라우드 서비스 제공 사업자 대부분이 서비스 형태로 제공 중

이미 K8s 기반의 컨테이너 환경 익숙한 경우, KES AWS 컨테이너  실행하는 가장 편리한 방법.  
ECS 온프레미스 확장 버전인 ECS Anywhere 있듯, EKS 온프레미스 확장 버전인 Amazon EKS Anywhere를 이용 좀 더 유연한 EKS 환경 구현.

Amazon EKS Distro 서비스를 이용 EKS 호환 환경구성을 무료로 다운로드, → 좀 더 긴밀하게 버전 컨트롤 및 환경구성 관련된 의존성 요소 관리.  
물론 K8s 사용자가 원하는 어디에서나 사용, EKS distro 통해 복잡해질 수 있는 K8s 운영 환경 좀 더 체계적이고, 표준화 방식으로 업데이트 및 관리

## 관리 컨테이너 기반 서비스

컨테이너 배포를 위한 컴퓨트 인프라 관리 신경X?,   
AWS Fargate를 이용 업무의 복잡성을 줄일 수 있음.  
AWS Fargate 여러분의 ECS 또는 ELS 플랫폼 안전, 격리된 환경 실행.  

Amazon Elastic Container Registry(ECR) 관리형 Docker 컨테이너 레지스트리 서비스, Docker 컨테이너 이미지의 저장, 관리, 배포 등 각종 업무 좀 더 간소화  
Amazon ECR은 GitHub  등 플랫폼에서 이미지를 관리해야 하는 부담,  
직접 컨테이너 저장소를 생성 및 관리해야 하는 부담 줄여줌

컨테이너 서비스와 AWS Identity and Access Management(IAM) 통합,  
각 컨테이너 저장소에 대한 리소스 수준 관리 가능.  
또한 ECR은 ECS 및 EKS와 긴밀히 연결, 컨테이너 오케스트레이션 작업 간소화.
