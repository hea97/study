# 개요

Amazon VPC 서비스  
EC2 네트워크 계층, EC2 인스턴스를 비롯 여러 AWS 서비스에 네트워크 리소스를 담을 수 있는 가상 네트워크.  
모든 VPC 기본적으로 다른 모든 네트워크와 격리 돼 있음, → 필요 시 인터넷 및 다른 VPC 과 같은 다른 네트워크와 연결 가능하다

VPC는 EC2 외 AWS 서비스의 기초. → VPC 작동법에 대해 이해. (중요)  
VPC는 AWS에서 제공하는 가장 중요 서비스 중 하나.

VPC는 한 AWS 리전 안에서만 존재, 한 리전에서 만든 VPC 다른 리전에서는 보이지 않음.  
하나의 계쩡에 여러 VPC를 둘 수 있고 단일 리전에 여러 VPC를 만들 수 있지만, 

간단한 예시에서는 한 리전에 VPC 하나만있다고 가정.

기존 네트워크와 그 구성 요소에 익숙, VPC 많은 구성 요소 잘 알 수 있음.  
but. VPC는 기존 TCP/IP 네트워크와 같이 작동하는 측면도 있지만, → 동시에 무리적 HW 추가하지 않고 네트워크 확장할 수 있다는 측면에서 기존 네트워크 구성 방식과 차이점 존재.  
VPC 전통적인 네트워크 구성 요소 라우터, 스위치, VLAN 등 사용 X, 네트워크 확장성 구현 위해 구성 요소 SW 기능 추상화한 뒤 새로명 명칭으로 부름

# VPC CIDR 블록

VPC는 전통적인 네트워크와 같이 하나 이상 연속적 IP 주소 범위 Classless Inter Domain Routing(CIDR) 블록 표시.  
CIDR 블록은 VPC 내 인스턴스 및 리소스에 할당 IP 주소 결정, 
VPC 만들 때는 기본 CIDR 블록을 할당, VPC 생성 후 기본 VPC CIDR 블록은 AWS에 따라 서브넷으로 나눠서 사용

IP 주소 범위 나타내는 여러 방법 중 가장 짧게 표현하는 방법은 빗금 문자 표기법(slash notation)이라 부르는 CIDR 표기법.  
ex. CIDR 712.16.0.0/16 표기법. 712.16.0.0부터 172.16.255.255에 이르는 총 65,536개 주소 포함

CIDR 블록에서 ‘/16’는 IP 길이를 나타내는 프리픽스(prefix)  
→ 서브넷 마스크의 길이를 나타냄, VPC CIDR 범위 /16에서 /28까지 가능.  
CIDR 표기법에서 길이 프리픽스와 IP 주소 수는 역의 관계가 있으며, 길이 프리픽스가 작을수록 CIDR 존재하는 IP 주소 많아짐.   
ex. ‘/28’ 길이 프리픽스 16개 주소만 존재, ‘/16’ 길이 프리픽스에는 65,536개 주소 존재

IP는 Internet Protocol 버전 4 또는 IPv4 축약어, 유효한 IPv4 프리픽스 길이는 /0부터 /32까지.  
VPC CIDR 지정, 우너하는 어떤 IP 범위라도 사용할 수 있음, 다른 퍼블릭 인터넷 주소와 충돌 피하기 위해 RFC 1918 범위 사용하 것 권장. 

- 10.0.0.0 - 10.255.255.255(10.0.0.0/8)
- 172.16.0.0 - 172.31.255.255(172.16.0.0/12)
- 192.168.0.0 - 192.168.255.255(192.168.0.0/16)

VPC 온프레미스 네트워크나 다른 VPC 등 다른 네트워크 연결 사용, VPC CIDR 다른 네트워크 이미 사용 주소 중복 X

## 보조 CIDR 블록

VPC 만든 → 보조 CIDR 블록 지정.  
보조 CIDR 블록 기본 CIDR 주소 범위 퍼블릭에서 라우팅 가능한 범위 내에 생성.  
but. 기본 블록 or 다른 보조 블록과 겹쳐 무방.  
ex. VPC 기본 CIDR이 172.16.0.0/16 경우 보조 CIDR 172.17.0.0/16 지정, → 보조 CIDR 범위 172.16.0.0/12 범위(172.16.0.0 - 172.31.255.255) 포함.   
하지만 보조 CIDR 블록 192.168.0.0/16으로 지정할 수 없다

향후 보조 CIDR 필요 시, 기본 CIDR 신중히 선택.  
기본 CIDR 192.168.0.0/16 지정, RFC 1918 범위 부합하는 보조 CIDR 만들 수 없음

## IPv6 CIDR 블록

VPC IPv6 CIDR 할당 가능.  
but. IP 프리픽스 지정할 수 있는 기본 CIDR과 달리, IPv6 CIDR 지정할 수 없음.  
대신, AWS 요청하면 AWS VPC IPv6 CIDR 할당, → 할당받은 IPv6 CIDR 글로벌 유니캐스트 IPv6 주소 공간 퍼블릭 라우팅 가능 IP 프리픽스 사용.  
ex. AWS CIDR 2600:1f18:2551:8900/56 → IPv6 CIDR 할당

IPv6 VPC CIDR 프리픽스 길이 항상 /56 (기억하기)

# 서브넷

서브넷은 VPC 네트워크 로직 컨테이너(logical container) EC2 인스턴스 같은 VPC 리소스 연결  
서브넷은 네트워크 상 존재하는 여러 인스턴스 서로 격리하는 역할, 인스턴스 간 트래픽 유입 및 유출 제어, 기능별 조직화.  
ex. 인터넷 접속 가능한 퍼블릭 웹 서버용 하나 더 추가. 서브넷은 전통적인 가상 LAM과 유사한 개념의 네트워크 요소

인스턴스는 서브넷 내 생성, AWS 콘솔 작업 때 ‘서브넷에서 인스터스 시작’ 문구 종종 보게됨  
서브넷 인스턴스를 생성 뒤 다른 서브넷으로 옮길 수 없음, → 하나의 VPC 생성된 인스턴스 다른 VPC 옮길 수 없다는 의미.  
서브넷 옮겨야 할 때 기존 인스턴스 종료 새 서브넷 인스턴스 시작.  
만일 기존 인스턴스의 EBS ㅜㄹ륨 내 데이터를 보존한 채 서브넷 올김, 볼륨 스냅샷 생성, AMI 생성 그리고 이 AMI 이용 원하는 서브넷 새 인스턴스 시작

## 서브넷 CIDR 블록

서브넷 CIDR VPC CIDR 영역 중 일부 서브넷 CIDR 사용.  
ex. VPC CIDR 172.16.0.0/16 경우,  
서브넷의 CIDR 172.16.100.0/24 → IP 주소 범위 172.16.100.0-172.16.100.255 총 256 주소 사용

AWS 모든 서브넷 처음 4개IP 주소 마지막 한 개 IP 주소 예약해 사용, → 이들 주소 인스턴에 할당 할 수 없음.  
ex. 서브넷 CIDR 172.16.100.0/24 다음 주소는 AWS 의해 예약돼 사용

- 172.16.100.0
- 172.16.100.1 - 내재된 라우터용
- 172.16.100.2 - Amazon 제공 DNS 서버용
- 172.16.100.3 - 예비로 예약
- 172.16.100.255

서브넷  CIDR 프리픽스 길이 제한 VPC CIDR과 같음.  
하나의 VPC 내 서브넷 CIDR 블록은 서로 겹쳐서 안됨, 서브넷 CIDR 할당한 뒤 변경 없음.

서브넷고 VPC 동일 CIDR 공유 가능.  
ex. CIDR 192.168.0.0/16 VPC 할당, VPC 내 서브넷 할당 → 다른 서브넷 위한 공간 전혀 없음, 결코 일반적 경우 할 수 없음, 단 하나의 AZ에서만 해당 서브넷 사용하도록 하기 위해 이런 방식 사용 가능.

보통 경우 VPC CIDR 블록보다 서브넷 프리픽스 길이 더 길게, 하나의 VPC 내 여러 개 서브넷을 둘 수 있도록 함.  
ex. VPC CIDR 192.168.0.0/16 할당 경우 해당 VPC 내 서브넷 CIDR 192.168.3.0/24 할당 다른 서브넷 추가할 여지 남겨두는 것이 일반적

서브넷은 여러 개의 CIDR X. VPC 보조 CIDR을 가질 수는 있음. 서브넷은 하나의 CIDR만 지닐 수 있음.  
또한 VPC 기본 CIDR과 보조 CIDR 있는 경우, 서브넷 CIDR 두 CIDR 중 하나 선택 생성.  
ex. VPC의 기본 CIDR 172.16.0.0/16 보조 CIDR 172.17.0.0/16, 보조 VPC CIDR 일부 172.17.12.0/24 서브넷 CIDR.

## 가용 영역

서브넷 하나 가용 영역(AZ, Availability Zone) 내 존재.  
가용 영역 리전에 비해 상대적으로 작은 지리적 위치, 개별 data 센터 비슷한 개념. 
AWS 리전 가용 영역은 서로 연결, 하나의 가용 영역에 장애 발생, 다른 영역에 그 영향이 미치지 않도록 설계

서로 다른 가용 영역 서브넷 하나씩 만든 뒤 인스턴스 → 서브넷에 분산 배치해 애플리케이션 복원성 구현.

서로 다른 가용 영역 있는 두 개 서브넷

| 서브넷 | 가용 영역 | 인스턴스 |
| --- | --- | --- |
| web-subenl1 | us-east-1a | web1 |
| web-subenl2 | us-east-1b | web2 |

위 표에 us-east-a 영역에 장애 발생, web1 인스턴스 해당 영역에 있으므로 문제 발생 시,  
us-east-1b 영역 있는 web2 문제 없이 사용.

서브넷 반드시 여러 가용 영역 만드는 것 X, 모든 서브넷을 같은 영역 배치, 해당 영역 장애 발생 모든 인스턴스 작동하지 않을 수 있다는 점 고려.

## IPv6 CIDR 블록

VPC IPv6 CIDR 할당, 해당 VPC 내 서브넷 IPv6 CIDR 할당. IPv6 서브넷 접두사 길이 /64 고정.  
ex. VPC IPv6 CIDR 2600:1f18:2551:8900/56, IPv6 서브넷 CIDR 2600:1f18:2551:8900/64에서 2600:1f18:2551:89FF/64 사이 값 할당

# 일래스틱 네트워크 인터페이스

Elastic Network Interface(ENI) 인스턴스가 AWS 서비스, 다른 인스턴스, 온프레미스 서버, 인터넷 등 다른 네트워크 리소스 통신할 수 있도록 하며, Secure Shell(SSH) 또는 Remote Desktop Protocol(RDP) 등 이용 인스턴스 실행 되는 OS 통신. ENI 기본적 물리적 서버 네트워크 인터페이스와 같은 기능 제공.  
환경설정 따라 통신 대상과 방법 등 세심하게 관리

초기 ENI Primary ENI 또는 Primary network interface로 불림. 단 하나의 서브넷에만 연결. 모든 인스턴스는 기본 네트워크 인터페이스(기본 ENI)가 있어, 이 인터페이스는 하나의 서브넷에만 연결.  
→ 인스턴스 시작 서브넷 지정하도록 하는 이유.  
기본 ENI 인스턴스에서 제거, 서브넷 또한 변경 X

## 기본 프라이빗 IP 주소 및 보조 프라이빗 IP 주소

각 인스턴스 서브넷으로 지정한 범위 내의 기본 프라이빗 IP 주소(Primary Private IP address).  
기본 프라이빗 IP 주소 인스턴스이 기본 EI 연결.   
이 주소는 변경 또는 삭제, 기본 ENI 보조 프라이빗 IP 주소(secondary private IP address) 할당 사용.  
보조 프라이빗 IP주소는 ENI 부착된 서브넷 범위 내 있음.

ENI 인스턴스에 추가 연결, → ENI 다른 서브넷 둘 수 있지만, 인스턴스와 동일한 가용 영역 내 있음. 
또한 ENI 할당 주소는 서브넷 부착된 프라이빗 IP 주소 범위 내에 있음

## ENI 부착하기

ENI 인스턴스와 독립적 존재.  
ENI 생성 뒤 인스턴스에 부착할 수 있음.  
ex. 하나의 서브넷 ENI 만든 후 인스턴스 시작할 때 미리 만들어 놓은 ENI를 기본 ENI 인스턴스에 부착.  
ENI ‘종료 시 삭제’ 속성 비활성화, 인스턴스를 종료해도 ENI 삭제된지 않음, 해당 NEI 다른 인스턴스 연결에 사용

인스턴에 부착되지 않은 기존 ENI 가져와 다른 인스턴스의 보조 ENI 부착.  
ex. 장애가 있는 인스턴스에서 ENI 분리한 뒤, 정상 작동중인 다른 인스턴스 연결하면 트래픽 장애 인스턴에서 정상 인스턴스로 전환

## 성능강화 네트워크

성능강화 네트워크(Enhanced Networking) NEI 비해 고속의 네트워크 처리 속도 및 저지연성 제공, 단일 루트 입출력 가상화(SR-IOW) 기법 사용.  
SR-IOW 기법은 동일한 물리적 서버 호스팅되고 있는 다수 인스턴스 하이퍼바이저를 우회할 수 있도록 하므로 좀 더 낮은 CPU 활성화 수준 및 좀 더 높은 네트워크 성능 제공.   
성능 강화 네트워크 기능은 아래 두 가지 방법 활용

Elastic Network Adapter ENA는 100Gbps에 이르는 처리 속도 제공, 대부분 인스턴스 타입 지원

Intel 82599 Virtual Function Interface 이 인터페이스 10Gbps 처리속도 제공, ENA 지원하지 않는 일부 인스터스 타입 지원

성능 강화 네트워크 사용, 인스턴스 OS 성능강화 네트워크 지원할 수 있는 드라이버 설치.  
Amazon Linux 및 Ubuntu HVM AMI에 ENA 지원 기능 기본 탑재

# 인터넷 게이트웨이

인터넷 게이트웨이 퍼블릭 IP 주소 지닌 인스턴스 인터넷 연결, 인터넷에서 들어오는 요처어 수신.  
기본 VPC 기본설정 인터넷 게이트웨이 제공하지만 직접 커스텀 VPC 생성해서 사용하는 경우,  
인터넷 게이트웨이도 직접 생성한 뒤 연결. 하나의 VPC 단 하나의 인터넷 게이트웨이만 연결, 여러 개의 인터넷 게이트웨이 생성한 뒤 여러 개의 VPC 인터넷 연결 사용

인터넷 게이트웨이 인터넷 서비스 제공 업체 온프레미스 설치 인터넷 라우터(Internet router) 유사, AWS 제공 인터넷 게이트웨이 기존 인터넷 라우터와 차이점.  
전통적인 네트워크, 서버가 인터넷과 연결되도록 하려면 코어 라우터의 기본 라우트 인터넷 라우터의 내부 IP 주소를 가리키도록 설정.

반면, 인터넷 게이트웨이에는 IP 주소나 네트워크 인터페이스 없으며, AWS 리소스 ID 식별용 할당.  
→ 리소스 ID는 igw- 시작  
(그 뒤 영문 및 숫자 문자열)  

인터넷 게이트웨이를 사용하려면 라우트 테이블에 인터넷 게이트웨이를 타겟으로 하는 기본 라우트 생성

# 라우트 테이블

VPC 내 트래픽 유입, 유출, 이동 제어 라우트 테이블(route table)에 저장 라우트(route) 이용  
사용자 의한 환경 설정 필요한 기존 물리적 혹은 가상 라우터 달리 VPC 아키텍처 IP 라우팅 SW 함수 구현한 내재된 라우터(implied router) 특징 지님.  
→ VPC 인터페이스 IP 주소 설정한 가상 라우터도, BGP 같은 동적 라우팅 프로토콜 없다는 읨.  
사용자는 내재된 라우터가 사용할 라우트 테이블만 관리하면 된다는 의미

하나의 라우트 테이블에는 하나 혹은 그 이상의 라우트와 최소하나의 서브넷 연결을 지님

여러 개의 서브넷에 연결된 라우트 테이블은 전통적인 라우터가 작동하는 방식과 매우 유사하게 작동.  
VPC 생성, AWS 메인 라우트 테이블이라 부른는 기본 라우트 테이블을 자동으로 생성한 뒤,  
→ VPC 모든 서브넷 연결. 기본 라우트 테이블 사용, 필요 따라 커스텀 라우트 테이블을 직접 생성한 뒤 하나 혹은 그 이상의 서브넷 연결해 사용

서브넷은 라우트 테이블 연결 없이 존재 X, 서브넷을 커스텀 라우트 테이블에 명시적으로 연결하지 않으면, AWS가 암묵적으로 해당 서브넷을 기본 라우트 테이블 연결

### 라우트

라우트는 라우트 테이블과 연결된 서브넷 내에서의 트래픽 유입 및 유출을 결정한다.  
IP 라우팅은 소스 IP 주소가 아닌, 대상 주소 IP 프리픽스에 의해 라우트 여부를 결정 대상 주소 기반 라우팅 기법

라우틑 생성 시 반드시 설정할 요소

- 대상 주소 IP 프리픽스
- 타겟 리소스

대상 주소(destination)는 CIDR 표기법으로 작성된 IPv4 또는 IPv6 프리픽스, 타겟(target) 인터넷 게이트웨이 또는 ENI 등 AWS 네트워크 리소스, IP 프리픽스는 타켓으로 사용 X.

모든 라우트 테이블에는 로컬 라우트가 포함  
인스턴스가 다른 서브넷으로 이동 서로 소통할 수 있도록 함.

로컬 라우팅

| 대상 주소 | 타겟 |
| --- | --- |
| 172.31.0.0/16 | Local |

로컬 라우트는 모든 라우트 테이블 포함, 수정 가능 라우트로서 동일 VPC 내 인스턴스 간 소통 허용.  
다른 IP 프리픽스 위한 라우트 없으므로 외부 VPC CIDR 범위 향한 모든 트래픽 차단

보안 시스템과 같은 특수 인스턴스를 위해 내부 서브넷으로만 트래픽 전송, 대상 서브넷 CIDR, 타겟으로 해당 인스턴스 ENI 지정 라읕 규칙 설정

## 기본 설정 라우트

인터넷 통해 인스턴스 접근하도록 할 때,  
기본 라우트(default route) 생성한 뒤 인터넷 게이트웨이 향하도록 해야함.  
→ 기본 라우트는 인터넷 트래픽의 서브넷에 댛나 유입 또한 유출 여부 결정. 

기본 라우트 추가한 라우트 테이블

| 대상 주소 | 타겟 |
| --- | --- |
| 172.31.0.0/16 | Local |
| 0.0.0.0/0 | igw-0e538022a0fddc318 |

0.0.0.0/0 프리픽스는 인터넷 호스트 포함.  
모든 IP 주소 사용한다는 의미. 기본 라우트 항상 이 값 설정. 퍼블릭 서브넷이란 인터넷 게이트웨이 향한느 라우트를 포함한 서브넷, 프라이빗 서브넷이란 인터넷 게이트웨이 대상 하는 라우트가 하나도 없는 서브넷 의미.

0.0.0.0/0 172.31.0.0/16 중복된 범위 있따는 사실 주목.  
내제된 라우터는 트래픽 어디로 보낼지 결정 가장 일치도 높은 범위 선택, 라우트 순서는 상관 X.  
ex. 특정 인스턴스 인터넷상 주소 198.51.100.50에 패킷 보냄. 198.51.100.50은 172.31.0.0/16 프리픽스 범위 포함 X, 0.0.0.0/0 프리빅스 범위 속하므로 내제된 라우터는 기본 라우트 이용 패킷 인터넷 게이트웨이로 보냄

AWS 개발자 문서 VPC 내제된 라우터 하나 있다고 설명.  
→ 기억할 점, 내제된 라우터는 실제로 존재하는 개별 리소스 아님, IP 라우팅 기능 추상화한 것이고, 라우트 테이블은 하나 이상의 서브넷 ㅇ녀결된 개별적인 가상 가우터라는 것

# 보안 그룹

보안 그룹(security group) 방화벽과 같은 기능, 인스턴스 ENI 대한 트래픽 유입 또는 유출 여부 허용 또는 거부 방식으로 인스턴스 트래픽 제어.  
모든 ENI 최소 하나 이상의 보안 그룹이 연결, 하나의 ENI 여러 개의 보안 그룹 연결, 하나의 보안 그룹을 다수 ENI 연결.

보안 그룹 생성 시, 보안 그룹 설명, 보안 그룹 포함될 VPC 지정.  
보안 그룹 생성 후 인바인드 및 아웃바운드규칙 지정. 트래픽 허용 여부 결정, 명시적으로 특정 트래픽에 댛나 허용 규칙 추가 X → 해당 경우 트래픽 차단.

## 인바운드 규칙

인바운드 규칙은 인스턴스 부착 ENI 유입된 트래픽 허용 여부 결정,  
세 가지 필수 요수 지님

- 소스(Source)
- 프로토콜(Protocol)
- 포트 범위(Port range)

새로 생성한 보안 그룹에는 인바운드 규칙 존재하지 않음.  
보안 그룹은 화이트 리스트(whitelisting)라고도 부르는 기본 거부(default-deny) 방식 사용, 규칙에 의해 명시적으로 허용되지 않은 모든 트래픽 거부.  
새 보안 그룹 생성 인스턴스에 부착한 경우, 해당 인스턴스로 유입되는 모든 트래픽 차단, 인바운드 규칙 추가해 트래픽 인스턴스로 유입될 수 있도록 함.  
→ 보안 그룹 규칙 순서는 영향 주지 않음  
ex. HTTPS 기반 웹 애플리케이션을 실행 인스턴스 O.  
모든 사용자가 인터넷으로 인스턴스에 접속할 수 있게 하려면 443 포트로 들어오는 모든 TCP 트래픽을 허용 인바운드 규칙 추가.  
SSH 사용, 인스턴스 관리하기 위해 TCP 22 포트에 대한 인바운드 규칙 추가, 다른 모든 사람도 SSH 접속할 수 있으면 좀 더 세분화된 규칙 필요

ex. IP 주소 198.51.100.10 SSH 접근만 허용 그 외 다른 주소 접근 차단하길 원하는 경우,  
모든 IP 주소의 SSH 및 HTTPS 접속 허용 인바운드 규칙

| 소스 | 프로토콜 | 포트 범위 |
| --- | --- | --- |
| 198.51.100.10/32 | TCP | 22 |
| 0.0.0.0/0 | TCP | 443 |

테이블에서 0.0.0.0/0 프리픽스는 모든 유효한 IP 주소 의미하므로 인터넷은 물론 VPC 내 모든 인스턴스로부터 유입되는 HTTPS 접근 허용.  
198.51.100.10/32 프리픽스는 198.51.100.10 해당하는 IP 주소만 사용.  
오직 해당 IP로만 SSH 접근, 보안 그룹에서는 규칙 순서는 의미 없다는 점 주의!

## 아웃바운드 규칙

아웃바운드 규칙  
인스턴스 부착된 ENI 유출되는 트래픽 허용 여부 결정, 세 가지 필수 요소

- 대상 주소(Destination)
- 프로토콜(Protocol)
- 포트 범위(Port range)

보안 그룹에서 아웃바운드 규칙은 인바운드 규칙에 비해 트래픽 제약 수준이 좀 더 낮은 경우 많음.  
보안 그룹 생성, AWS 자동으로 아웃바운드 규칙 생성

인터넷 접속 허용 아웃바운드 규칙

| 대상 주소 | 프로토콜 | 포트 범위 |
| --- | --- | --- |
| 0.0.0.0/0 | All | All |

규칙 목적은 인스턴스가 인터넷 및 다른 AWS 리소스에 접속하라 수 있도록 하는 것.  
→ 규칙을 삭제하게 된다면, 보안 그룹은 인스턴스가 인터넷 또는 다르 어떤 요소에도 접속하지 못하도록 함.

## 소스 및 대상 주소

보안 그룹 규칙에서 소스나 대상 주소는 CIDR 블록 또는 보안 그룹의 리소스 ID 될 수 있음.  
보안 그룹을 소스로 지정하면, 해당 보안 그룹이 부착된 모든 인스턴스 트래픽 허용.  
즉, 다수 인스턴스에 동일한 보안 그룹을 부착해서 인스턴스가 서로 소통할 수 있게 됨.

소스 보안 그룹은 다른 AWS 계정 있어도 무방, → 소스 보안 그룹 해당 계정 소유자 ID 지정하면 됨

## 스테이풀 방화벽

보안 그룹은 상태 저장 방화벽(stateful firewall) 기능 제공.  
→ 상태 저장 또는 스테이트풀이란,  
보안 그룹이 트래픽을 한 방향으로 전달하도록 허용한 뒤, 방대 방향의 응답 트래픽을 지능적으로 허용하는 것을 의미.  
ex. 인스턴스 부착된 보안 그룹이 인터넷 SW 저장소 유출되는 아웃바운드 트래픽을 허용, 해당 인스턴스로 다시 유입되는 응답 트래픽 자동 허용.

보안 그룹은 연결 추적(connection tracking) 기능 이용 응답 트래픽의 허용 여부 결정.  
TCP 및 UDP 트래픽 경우, 보안 그룹 규칙 허용된 개별 패킷의 흐름 정보(flow information) 확인.  
보안 그룹은 패킷 흐름을 추적해 응답 트래피이 동일한 플로우에 포함된 것인지 확인해 다른 미분류 트래픽 구분

플로우 정보

- 프로토콜
- 소스 및 대상 주소 IP 주소
- 소스 및 대상 주소 포트 번호

보안 그룹 플로우 추적해 응답 트래픽이 동일 플로우 나온 것인지 식별

## 기본 보안 그룹

모든 VPC에는 삭제 불가능한 기본 보안 그룹이 포함.  
기본 보안 그룹을 사용할 때는 필요에 맞춰 규칙 수정한 뒤 사용, 기본 보안 그룹 대신, 직접 커스텀 보안 그룹 만들어 사용.

# 네트워크 접속 제어 목록

네트워크 접속 제어 목록(Network Access Control List(NACL)은 소스, 대상 주소 CIDR, 프로토콜, 포트 기반의 인바운드 및 아웃바운드 규칙 제공한다는 측면에서, 보안 그룹과 같은 방화벽 기능 수행,   
각 VPC 삭제할 수 없는 기본 NACL 있음.(보안 그룹과 유사)

but. NACL은 여러 측면에서 보안 그룹과 다르다.   
NACL은 ENI 아닌 서브넷에 연결, 서브넷과 연결된 NACL 해당 서브넷 유입 및 유출되는 트래픽을 제어.  
즉, 서브넷 내의 인스턴스 간 트래픽을 제어할 때는 NACL 사용 X, 보안 그룹을 사용

서브넷 하나의 NACL만 연결, VPC 서브넷 만들면 기본적으로 VPC 기본 NACL 서브넷 연결.  
사용자는 기본 NACL 수정, 새 NACL 만들어 서브넷 연결.  
서브넷 NACL 같은 VPC 있다면 하나의 NACL 여러 서브넷 연결

보안 그룹 스테이트풀(stateful), 저장 속성을 지니는 반면, NACL은 스테이트리스(statelss), 상태 비저장 속성.  
즉, NACL 통과 연결 상태 추적하지 않고, 응답 트래픽 자동 허용하지 않는다는 점에서 전통적인 스위치나 라우터의 접속 제어 목록 ALC과 유사.  
NACL 같은 스테이트 속성으로 인해 모든 인바운드와 아웃바 운드 트래픽의 허용 규칙 별도 작성

## 인바운드 규칙

인바운드 규칙은 서브넷으로 유입되는 트래픽 허용 여부 결정, 각 인바운드 규칙

- 규칙 번호
- 프로토콜
- 포트 범위
- 소스 CIDR
- 동작(허용 or 거부)

VPC 기본 NACL IPv6 CIDR 없음, 두 개의 인바운드 규칙 미리 채워진 채 제공.

기본 NACL 인바운드 규칙

| 규칙 번호 | 프로토콜 | 포트 범위 | 소스 | 동작 |
| --- | --- | --- | --- | --- |
| 100 | All | All | 0.0.0.0/0 | Allow |
| * | All | All | 0.0.0.0/0 | Deny |

NACL 규칙은 규칙 번호의 오름차순 처리.  
규칙 100은 가장 작은 번호를 가진 규칙이므로 먼저 처리, 원본에서 들어오는 모든 트래픽 한 NACL 규칙은 규칙 번호의 오름차순 처리.  
규칙 100은 가장 낮은 번호를 가진 규칙으로서 가장 먼저 처리, 소드에서 유입되는 모든 트래픽을 허용한다.  
사용자는 필요 따라 규칙 삭제, 수정할 수 있고, 앞뒤 규칙 추가  
ex. HTTP만 차단하려 할 때

접속 차단 규칙

| 규칙 번호 | 프로토콜 | 포트 범위 | 소스 | 동작 |
| --- | --- | --- | --- | --- |
| 90 | TCP | 80 | 0.0.0.0/0 | Deny |

규칙은 대상 주소 포트 80인 모든 TCP 트래픽 거부, 목록 가장 낮은 번호 규칙 가장 먼저 처리.  
→ 해당하지 않는 트래픽은 모든 트래픽을 허용하는 위 규칙 100 내용.  
90번 규칙과 100번 규칙이 모두 적용, TCP 포트 80 이외 모든 트래픽 유입 허용

참고

마지막 행 기본 규칙.  
기본 규칙 숫자 대신 발표(*) 순서 지정 항상 규칙 목록 중 마지막 적용.  
NACL 기본 규칙은 삭제하거나 변경 할 수 없음, 선순위 규칙 명시적으로 허용하지 않은 모든 트래픽 거부

## 아웃바운드 규칙

NACL 아웃바운드 규칙은 앞서 살펴본 인바운드 규칙과 매우 유사

- 규칙 번호
- 프로토콜
- 포트 범위
- 소스
- 동작

NACL 기본 아웃바운드 규칙은 대상 주소 열이 추가된 부분 외 기본 인바운드 규칙 동일

| 규칙 번호 | 프로토콜 | 포트 범위 | 소스 | 동작 |
| --- | --- | --- | --- | --- |
| 100 | All | All | 0.0.0.0/0 | Allow |
| * | All | All | 0.0.0.0/0 | Deny |

NACL 스테이트리스 속성 따라 응답 트래픽 자동 허용하지 않음. 즉, 인바운드 규칙 HTTPS 트래픽 허용함.  
아웃바운드 규칙 → 응답 트래픽 명시적 허용.  
4.8 규칙 번호 100은 응답 트래픽 허용

서브넷 유입되는 트래픽 제한 경우, 응답 트래픽이 임시 포트(ephemeral ports) 통해 전달되도록 하는 아웃바운드 규칙 생성  
임시 포트란,  
클라이언트에서 응답 트래픽을 수신하기 위해 대기하는 TCP 또는 UDP 포트.  
ex. 클라이언트에서 TCP 포트 80으로 인스턴스에 HTTP 요청 보낸 뒤, TCP 포트 36034로 향하는 트래픽 허용

임시 포트 범위는 클라이언트 OS에 따라 다름.  
최신 OS에서는 49152 ~ 65535 범위 임시 포트 사용, → 범위가 충분하지 않아 TCP 포트 범위는 UDP 포트 범위와 다를 수 있음, 구 버전의 OS 또는 사용자 정의가 추가된 OS 다른 범위도 함께 사용.  
호환성 유지, NACL 아웃바운드 규칙 대신 보안 그룹 사용

참고

## NACL과 보안 그룹 함께 사용

인스턴스 시작할 때 보안 그룹을 올바르게 저장해야 하는 부담 줄이기 위해, 보안 그룹과 NACL 함께 사용할 수 있음.  
NACL 서브넷 적용, NACL 규칙은 보안 그룹의 설정 내용과 상관 없이 서브넷 모든 유입 및 유출 트래픽 적용

NACL 또는 보안 그룹 규칙을 변경하면 해당 변경 사항 즉시 적용, 보안 그룹과 NACL 동시 변경하지 않는 것이 좋음.   
규칙 변경 후 예상대로 작동하지 않으면, 보안 그룹의 문제인지 혹은 NACL 문제인지 파악하기 어려워짐.  
NACL  규칙의 순서가 올바르지 않거나 보안 그룹 규칙이 빠져서 연결 끊기는 것을 파악하기 위해 인스턴스 인터넷 연결한 상태 변경 진행

참고

# 퍼블릭 IP 주소

퍼블릭 IP 주소 퍼블릭 인터넷으로 접속 가능 주소, 인터넷을 통한 연결 불가능하고 프라이빗 네트워크로만 연결될 수 있는 RFC 1918 주소와는 반대되는 속성

다른 사용자가 인터넷을 통해 인스턴에 직접 접속할 수 있도록 하려면 퍼블릭 IP 주소가 필요, → 해당 인스턴스가 포함된 VPC 인터넷 게이트웨이 연결, 때론 아웃바운드 인터넷 접속 위한 용도로 퍼블릭 IP 주소를 사용하는 경우, VPC 인프라 내부에서 인스턴스 간 소통을 할때는 프라이빗 IP 주소 사용 퍼블릭 IP 주소 사용하지 않음

서브넷 인스턴스를 시작 시 자동으로 퍼블릭 IP 생성되도록 할 수 있지만, 이 경우 몇 가지 문제점 발생.  
먼저, 인스턴스 싲가 시점에 퍼블릭 IP 생성 옵션을 선택하지 못하면 이전 단계로 돌아가서 생성할 수 없고, AWS 자동으로 임이의 퍼블릭 IP 할당.  
자동으로 할당된 퍼블릭 IP 주소는 지속성 없다는 문제점.  
인스턴스 중지 또는 종료 시 해당 퍼블릭 IP 주소도 함께 삭제, 인스턴스 재시작시 새로운 퍼블릭 IP 주소 할당

인스턴스 직접 중지시킬 계획 없더라도 AWS 자체적인 성능 유지보수 이벤트에 의해 인스턴스 재시작 가능성 있음, → 퍼블릭 IP 주소는 변경.  
→ 같은 퍼블릭 IP 주소의 재설정 동작은 동일한 퍼블릭 IP  주소를 장기간 유지할 필요 없다면 문제 되지 않음 애플리케이션 관리의 일관성 위해 동일한 주소를 유지해야 할 경우 EIP - 일래스틱 IP 사용

# 탄력적 IP

탄력적 IP(Elastic IP Address(EIP) 사용자 요청 따라 AWS 사용자의 계정에 할당하는 퍼블릭 IP 주소.  
계정에 EIP 할당, 사용자가 직접 해체하지 않는 한 해당 주소를 독점적으로 사용.  
AWS 외부에서 보면, EIP와 AWS 자동으로 할당한 퍼블릭 IP 간 차이 없

EIP 처음 생성, 인스턴스 연결되지 않은 상태 만들어짐 직접 EIP를 ENI 연결. → 다른 ENI 옮겨 연결할 수 있되 한번 하나의 ENI만 연결. EIP ENI 연결 뒤 ENI 삭제하거나 EIP 해제하지 않는 한 연결 계속 유지

이미 퍼블릭 IP 주소가 자동으로 할당된 ENI EP 연결, AWS 퍼블릭 IP 주소 EIP 변경

EIPP AWS 리전 단위 제공 리전을 벗어날 수 없지만, EIP AWS 계정 보유한 퍼블릭 IP 주소 전달 가능.  
→ ‘내가 보유한 IP 주소 가져오기’라는 의미 BYOIP(bring your own IP address) 리전 당 최대 다섯 개의 주소 블록 가져올 수 있음

# AWS 글로벌 엑셀리레이터

리소스가 AWS 여러 리전에 배포 돼 있다면 리전 별로 여러 개의 EIP 관리하는 일이 복잡하게 느껴짐  
AWS 글로벌 엑셀러레이터는 어디에든 연결할 수 있는 두 개의 정적 IPv4 주소를 제공 → 어떤 리전 있는 리소스 서로 연결

AWS 리전 별 서비스인 EIP 달리 AWS 글로벌 엑셀러레이터는 30여 개국 퍼져 있는 AWS 접속 포인트(POP) 연결 정직 주소 체계. 
→ㅡ 정적 주소 동시에 다수 접속 포인트를 연결할 수 있으므로 애니캐승트 주소(anycast address)로도 부름

정적 주소로 연결된 사용자는 자동으로 최인접 POP 라우팅   
글로벌 엑셀러레이터의 리스너는  TCP or UDP 패킷 수니한 뒤, 미리 저장한 엔드포인트 그룹, 즉 리소스 전달. 엔드포인트 그룹 EIP, ELB, EC2 인스턴스 포함

글로벌 엑셀러레이터 애니캐스트 주소 통해 가장 빠른 엔드포인트로 트래픽 전송.  
특정 POP 작동하지 않는 경우 트래픽 자동으로 다른 POP 라우팅 전체 서비스에는 영향 없음

# 네트워크 주소 변환

 ENI 퍼블릭 IP 주소 연결한 뒤 NEI 프라이빗 IP 주소 유지, ENI 퍼블릭 IP 주소 연결 새로운 주소로 ENI 프라이빗 IP 주소로 맵핑하게 됨, → 프로세스를 네트워크 주소 변환,  
즉 NAT(Network Address Translation)

퍼블릭 IP 지닌 인스턴스를 인터넷 상 호스트 연결, 호스트 인스턴스의 퍼블릭 IP 나온 트래픽 수신.  
ex. 인스턴스 프라이빗 IP 주소 172.31.7.10, 연결된 EIP 35.168.241.48 인스턴스 패킷 전달 인터넷 호스트 198.51.100.11 경우 인터넷 게이트웨이 전달되는 패킷

- 소스(Source) IP 주소    
172.31.7.10
- 대상 주소(Destination) IP 주소  
35.168.241.48

인터넷 게이트웨이 패킷을 변환해 서스 IP 주소 인스턴스 퍼블릭 IP 주소로 변경.  
인터넷 게이트웨이 호스트 전달하는 변환된 패킷

- 소스 IP 주소   
35.168.241.48
- 대상 주소의 IP 주소  
198.51.100.11

인터넷 호스트 인스턴스 EIP 패킷 전송 경우, 인터넷 게이트웨이는 유입되는 패킷 대해서 네트워크 주소 변환 작업 시행.  
인터넷 호스트에서 전송해 인터넷 게이트웨이수신되는 패킷

- 소스의 IP 주소  
198.51.100.11
- 대상 주소의 IP 주소  
35.168.241.48

인터넷 게이트웨이는 이 패킷 변환해 인스턴스의 프라이빗 IP 주소 대상 주소의 IP 변경

- 소스 IP 주소  
198.51.100.11
- 대상 주소의 IP 주소    
172.31.7.10

NAT 작업은 인스턴스가 퍼블릭 IP 주소 지닌 경우,  
인터넷 게이트웨이 자동으로 이뤄짐. 이러한 동작은 사용자가 바꿀 수 없음

참고

# NAT 디바이스

네트워크 주소 변환은 인터넷 게이트웨이 이뤄지지만, 다음 두 가지 서비스 네트워크 주소 변환 작업 수행

- NAT 게이트웨이
- NAT 인스턴스

AWS 제공 NAT 디바이스 인스턴스가 인터넷 접속할 수 있게 함녀, 인터넷 상 호스트 인스턴스 직접 접속하지 못하게 한다는데 기본 목적.  
→ 인스턴스 위한 업데이트 패치 때 유용

NAT 디바이스 사용 인스턴스 인터넷 접속해야 할 때도, 퍼블릭 IP 주소 할당하지 않음, 인터넷 상 호스트 직접 인스턴스 접근, 오직 NAT 디바이스 퍼블릭 서브넷 내 인터페이스만 퍼블릭 IP 연결  

NAT 사용시 IP 주소 환경 설정

| Name | Subnet | Private IP | Public IP |
| --- | --- | --- | --- |
| db1 | Private | 172.31.7.11 | None |
| db2 | Private | 172.31.7.12 | None |
| Nat device | Public | 172.31.8.10 | 18.209.220.180 |

db1이 198.51.100.11 주소 인터넷 호스트에게 패킷을 전송하면 해당 패킷은 머저 NAT 디바이스로 전달, NAT 디바이스의 패킷 변화

---

**원본 패킷의 소스 IP 주소**

172.31.7.11 (db1)

**원본 패킷의 대상주소 IP 주소**

198.51.100.11

**변환된 패킷의 소스 IP 주소**

172.31.8.10 (NAT 디바이스)

**변환된 패킷의 대상주소 IP 주소**

198.51.100.11

---

NAT 디바이스 변환도니 패킷 받아 인터넷 게이트웨이 전달, 인터넷 게이트웨이 패킷에 대한 NAT 변환 작업 수행

---

**NAT 디바이스 패킷 소스 IP 주소**

172.31.8.10 (NAT 디바이스)

**NAT 디바이스 패킷의 대상주소 IP 주소**

198.51.100.11

**변환된 패킷의 소스 IP 주소**

18.209.220.180 (NAT 디바이스의 EIP)

**변환된 패킷의 대상주소 IP 주소**

198.51.100.11

---

여러 인스턴스가 같은 NAT 디바이스 사용할 수 있음, 동일한 퍼블릭 IP 주소를 공유해서 아웃바운드 연결 생성.  
NAT 디바이스의 이와 같은 작업 포트 주소 변환, PAT(Port Address Translation).

## NAT 디바이스 위한 라우트 테이블 설정 변경

NAT 디바이스 사용 인스턴스 인터넷 연결된 트래픽 NAT 디바이스로 보냄, NAT 디바이스는 다시 이 트래픽을 인터넷 게이트웨이 전송.  
→ NAT 디바이스  사용하는 인스턴스 기본 라우트 서로 달라야함, 라우트 테이블도 달라야 함 별도의 서브넷 존재

인스턴스는 프라이빗 서브넷, NAT 디바이스 퍼블릭 서브넷 있다는 사실

프라이빗 서브넷 및 퍼블릭 서브넷용 기본 라우트

| 서브넷 | 대상 주소 | 대상 |
| --- | --- | --- |
| 프라이빗 | 0.0.0.0/0 | NAT 디바이스 |
| 퍼블릭 | 0.0.0.0/0 | igw-0e538022a0fddc318 |

라우트 테이블에서 이들 관계 보여줌.  
라우트 타겟 또는 대상은 인스턴스, 인터넷 게이트웨이, ENI 등 VPC 내 리소스 가능 설명.  
NAT 디바이스 사용, NAT 게이트웨이 또는 NAT 인스턴스 중 어떤 것을 사용하느냐 따라 라우트 타겟 달라짐

## NAT 게이트웨이

NAT 게이트웨이 AWS 관리 NAT 디바이스 인터넷 게이트웨이처럼 하나의 NAT 게이트웨이 어떠한 형식 요청 처리.  
단일 유형 NAT 게이트웨이만 제공, 사용자는 별도 관리 또는 접속 작업 할 필요 없음, 자동으로 모든 대역폭 요구 대응하므로 용량 관리 문제 신경 쓸 필요 X.

사용자는 NAT 게이트웨이 생성할 때 EIP 할당해서 연결, 인터넷 접속 가능하도록 퍼블릭 서브넷 생성.  
→ AWS 해당 서브넷 있는 프라이빗 IP 주소 NAT 게이트웨이 할당  
중복 구현 위해 다른 AZ NAT 게이트웨이 추가 생성

NAT 게이트웨이 만든 후, 기본 라우트 만들어서 인스턴스 인터넷 향하는 트래픽 NAT 게이트웨이 전달되도록.  
기본 라우트 대상은 nat-0750b9c8de7e75e9f 같은 형식의 NAT 게이트웨이 ID 지정.  
여러 개의 NAT 게이트웨이 사용 경우, 트래픽 타겟 또는 대상으로 각각 NAT 게이트웨이 향하도록 여러개의 기본 라우트 생성

NAT 게이트웨이 NEI 사용하지 않으므로 보안 그룹 적용할 수 없음.  서브넷 NACL 적용 트래픽 제어

NAT 게이트웨이 IPv6 → IPv4  네트워크 주소 변환 지원하는 프로토콜인 NAT64 지원, 온프레미스 IPv4 전용 네트워크로 호스팅하고, EC2 인스턴스는 IPv6 전용 네트워크로 호스팅하는 경우 두 네트워크 문제 없이 연결.   
단, NAT64 프로토콜 사용, 각 서브넷 DNS64 프로토콜도 활성화.  
DNS64 IPv6 전용 리소스 사용 IPv4 레코드만 지닌 도메인 네이므이 쿼리 해석

## NAT 인스턴스

NAT 인스턴스 Linux 기반 AMI 생성된 일반적인 EC2 인스턴스 일종, NAT 인스턴스 생성 방법  다른 인스턴스 생성과 동일. NAT 인스턴스 기능적인 측면에서 NAT 게이트웨이 공톰점 있음, 중요한 차이점 존재

NAT 인스턴스는 NAT 게이트웨이와 달리 대역폭 요구 증가하더라도 자동으로 확장되지 않음, 처음부터 적절한 성능 갖춘 인스턴스 유형 선택하는 것이 중요.  
요구 성능 비해 너무 작은 인스턴스 유형 선택, 직접 더 큰 인스턴스 유형 업그레이드

또한 NAT 인스턴스 ENI 지니므로 보안 그룹 적용, 직접 퍼블릭 IP 주소 할당. 직접 NAT  인스턴스의 ENI 소스/대상주소 옵션을 비활성화.  
→ NAT 인스턴스 자신의 IP 향하는 트래픽 수신, 보유하지 않는 IP 트래픽 송신

NAT 인스턴스의 이점 중 하나 NAT 인스턴스 배스티온 호스트(Bastion Host) 또는 점프 호스트(jump host) 사용, 퍼블릭 IP 없는 인스턴스에 연결.  
→ NAT 게이트웨이로 불가능한 작업

사용자는 기본  라우트를 생성한 뒤 인터넷 연결 트래픽을 NAT 인스턴스 ID.

NAT 인스턴스에서 인스턴스나 AZ 장애 발생 시 다른 NAT 인스턴스 대체하는 것 같이 간단하게 문제를 해결할 수 없다는 단점.   
→ 기본 라우트 하나만 정의해서 사용, 다른 NAT 인스턴스를 가리키도록 하는 것 불가능.  
네트워크의 복원성이 중요한 속성이라면 NAT 인스턴스 대신, NAT 게이트웨이 사용

참고

# AWS PrivateLink

AWS PrivateLink 인터넷을 우회해 VPC 리소스 AWS 서비스 온프레미스 리소스가 서로 소통할수있는 방법 제공.  
PrivateLink AWS 리전, 엣지 로케이션 등 자체 네트워크 고객 데이터 센터 연결 전용 프라이빗 통신선 이용  
퍼블릭 인터넷망 우회해 통신 제지연성 신뢰성 높은 연결성 ㅈ공

# VPC 피어링

VPC 피어링을 구성하면 프라이빗 AWS 네트워크를 통해 하나의 VPC 포함된 인스턴스가 다른 VPC 포함된 인스턴스와 소통할 수 있다.    
→ 서로 다른 AWS 계정의 인스턴스와 연결할 때 사용

VPC 피어링을 활성화하려면 두 VPC 사이에 VPC 피어링 연결을 설정.  
VPC 피어링 연결은 두 VPC 사이의 점대점(point-to-point) 연결, 두 VPC 간 단 하나의 피어링만 설정, 두 VPC의 CIDR 블록은 겹치지 않아야함.

VPC 피어링 연결은 인스턴스 간 통신만 허용.  
즉, 하나의 VPC 있는 인스턴스 피어링된 다른 VPC 인스턴스에 연결하는 데만 피어링 연결을 사용할 수 있다  
VPC 피어링 환경에서 인터넷 게이트웨이나 NAT 디바이스는 공유할 수 없지만, NLB(Network Load Balancer) 공유할 수 있음

2개 이상의 VPC 연결, 하나의 VPC와 다른 모든 VPC마다 1:1 피어링 연결 생성해야하며, 하나를 연결 다른 것도 자동으로 연결성을 지니는 데이지 채인(daisy-chain) 방식으로 연결되지 않음.  
즉, 하나의 VPC 쌍마다 각각 VPC 피어링을 생성.

피어링 연결 사용하려면 트래픽이 양방향으로 소통되도록 두 VPC 새로운 라우트 규칙 추가.  
→각 라우트 대상주소 프리픽스는 대상주소 VPC의 범위 내에 있어야함,  
각 라우트 타겟은 pcx-로 시작하는 피어링 연결 ID로 함.  

VPC 피어링을 위한 라우트

| 소스 VPC CIDR | 대상주소 VPC CIDR | 타겟 |
| --- | --- | --- |
| 172.31.0.0/16 | 10.0.0.0/16 | pcx-076781cf11220b9dc |
| 10.0.0.0/16 | 172.31.0.0/16 | pcx-076781cf11220b9dc |

각 라우트가 서로 방향만 바꿔 그대로 사용되고 있음을 알 수 있으며, 이런 방식으로 양방향 소통 가능.  
→ 대상주소 VPC CIDR과 정확히 일치할 필요 없음.  
VPC가 아닌 서브넷 레벨의 피어링을 생성하려면, 서브넷 CIDR을 대신 지정

VPC 피어링과 관련, 일부 리전에서는 리전 간 VPC 피어링을 사용할 수 없다는 점과 IPv6를 지원하지 않다는 점 주의.  
리전 간 피어링 연결의 최대 전송 단위(MTU)는 ,1500바이트

# 하이브리드 클라우드 네트워크

VPC 리소스와 인터넷 인터넷 연결을 중심으로 살펴봤지만, 기업 데이터 센터와 관련된 리소스의 경우, 프라이빗 속성을 지니고 인터넷과 연결성이 없도록 설계한다.  
AWS 온프레미스와 VPC 프라이빗 연결 서비스

- AWS Site-to-Site Virtual Private Network (VPN)
- AWS Transit Gateway
- AWS direct Connect

## AWS Site-to-Site VPN

VPN을 이용 퍼블릭 인터넷 이용해 VPC와 데이터 센터 또는 사무실 등 오프레미스 네트워크를 안전하게 연결

VPN 연결 생성할 때 VPG(Virtual Private Gateway)라 부르는 VPC 리소스 구성, 온프레미스 라우터 또는 방화벽 등 고객 게이트웨이를 구성,  
→ VPG로 암호화 VPN 터널 생성.  
VPG는 AES 256 비트 AES 128 비트 암호를 지원

온프레미스 네트워크르 여러 개의 VPC와 연결, 각 VPC마다 별도의 VPG 및 VPN 터널 생성.  
VPC는 하나의 연결 다른 요소와의 연결 확장전 라우팅(transitive routing)을 지원하지 않음 VPC를 단순히 쌍으로 연결하는 것만으로는 작동하지 않음.   
→ 다른 VPC 이동

하지만, 대량의 VPC 온프레미스 네트워크에 연결할 떄, 또는 다수의 오늪레미스 네트워크를 하나의 VPC 연결, VPN 이용하면 엄청나게 많은 수작업을 해야함. 실수 또한 발생할 수 있음.  
→ AWS Transit Gateway 사용하는 것이 좋음

참고 | 서로 다른 지역 여러 개의 VPN 고객 게이트웨이로 연결해야 할 경우, Global Accelerator 엔드포인트 사용하면 설정 작업은 단순, 성능은 높아짐

## AWS Transit Gateway

AWS Transit Gateway는 Direct Connect 링크와 VPN 사용 다수의 VPC 및 다수의 온프레미스 네트워크를 연결할 수 있도록 해주는 고가용성 서비스. AWS Transit Gateway는 연결 작업은 간소화, VPC 온프레미스에 대한 트래픽은 매우 세밀하게 제어할 수 있도록 돕는다

AWS Transit Gateway 사용 먼저 Transit Gateway 생성, VPC, VPN 연결, Direct Connect 게이트에이, 또는 다른 Transit Gateway 부착

다음, Transit Gateway 라우트 테이블 통해 부착된 요소 서로 연결

### Transit Gateway 라우트 테이블

Transit Gateway 라우트 테이블은 부착된 네트워크 리소스 트래픽 흐름을 제어, VPC 서브넷과 연결되는 메인 라우트 테이블 또는 커스텀 라우트 테이블과 비슷, 몇 가지 중요한 차이점 존재

Transit Gateway 라우트 테이블에서 타겟은 VPC, VPN 연결, Direct Connect 게이트웨이, 또는 다른 Transit Gateway 부착 가능, ENI 또는 인터넷 게이트웨이를 지정할 수 없음

참고 | Transit Gateway 부착 리소스는 시간 단위로 과금

AWS Transit  Gateway 의 활용 방법 다양하지만,  
주로 다섯가지 방법 활용

- 중앙화 라우타(Centralized router)
- 격리 라우터(Isolated router)
- 공유 서비스(Shared services)
- 피어링(Peering)
- 멀티캐스트(Multicast)

### 중앙화 라우터

Transit Gateway를 중앙화 라우터를 사용 모든 VPC 및 온프레미스 트래픽을 제어하는데 활용.  
중앙화 라우터 모델로 사용할 때, 하나의 Transit Gateway 라우트 테이블에 다른 모든 리소스 연결

Transit Gateway로 VPC와 온프레미스 네트워크 연결할 때 VPG 사용하지 않는다.  
대신, Transit Gateway 온프레미스 라우터 또는 방화벽 VPN 연결 종료, BGP 통해 라우트 정보 넘김. → 라우터 정보는 Transit Gateway 라우트 테이블에 보관, VPC와 연결된 라우트 정보 또한 Transit Gateway 라우트 테이블에 저장.  이와 같은 동적으로 라우트 테이블에서 라우트 학습 저장하는 과정을 라우트 전파(route propagation)라 부름

Transit Gateway 작동 방식을 이해하기 위해,  예시를 들어보자면 온프레미스 네트워크는 192.168.0.0/16, VPC 서브넷 10.98.76.0/24라고 할 때

Transit Gateway를 이용 VPC 서브넷과 온프레미스 네트워크가 소통하려면, 먼저 VPC Transit Gateway를 부착  
이렇게 하면, Transit Gateway 라우트 테이블에 서브넷으로 향하는 동적으로 전파되는 라우트가 생성. 다음, 서브넷과 연결된 라우트 테이블에 Transit Gateway 타겟으로 하는 정적 라우트를 생성.  다음, Transit Gateway와 온프레미스 네트워크를 잇는 VPN 연결 구성.  
온프레미스 디바이스가 VPN 연결 종료시키려면 BGP 통해 라우트가 전달, → 라우트는 동적으로 Transit Gateway 라우트 테이블 구성

| 라우트 테이블 | 대상주소 | 대상(타겟) | 라우트 타입 |
| --- | --- | --- | --- |
| VPC 서브넷 | 192.168.0.0/16 | Transit gateway | Static |
| Transit gateway | 192.168.0.0/16 | VPN connection | Propagated |
| Transit gateway | 10.98.76.0/24 | VPN connection | Propagated |

### 격리 VPC

Transit Gateway 부착된 리소스와 연결되는 다수 Transit Gateway 라우트 테이블을 진리 수 있으므로, 하나의 Transit Gateway 다수 격리 VPC 생성.  
격리 VPC 여러 개의 VPC를 보유한 상황에서 온프레미스 네트워크와는 연결성을 유지하면서도 VPC 간 서로 격리성 유지하려 할 떄 유용

### 공유 서비스에서의 격리 VPC 사용

하나의 VPC에서 Active Directory or LLDP(Link Layer Discovery Protocol) 등 공유 서비스 호스팅하는 경우, Transit Gateway 이용 격리 및 보안 유지된 상태에서 공유 환경을 구성할 수 있음

### Transit Gateway 피어링

Transit Gateway 이용 서로 다른 리전 간 피어링도 가능   
다른 리전에 리소스가 산재한 경우 Transit Gateway 이용 VPN 연결 및 VPC 피어링 연결 수 줄이면서 리전 간 피어링 구현

### 멀티캐스트

AWS Transit Gateway는 VPC 간 멀티캐스트(multicast) 지원.    
각 멀티캐스트 도메인에서 인스턴스 ENI를 지정 멀티캐스트 소스로 사용,  
→ 멀티캐스트 그룹(multicast group) 부름.  
또한 멀티캐스트 그룹 주소 및 EC2 인스턴스를 지정 멀티캐스트 트래픽을 수신. 어떤 EC2 인스턴스든 멀티캐스트를 수신할 수 있지만 멀티캐스트 송신은 Nitro 인스턴스만 가능

단일 멀티캐스트 도메인에 다수의 멀티캐스트 그룹을 구성할 수 있음, 단 하나의 멀티캐스트 도메인에만 VPC 서브넷을 연결하는 것도 가능  
단, 멀티캐스트 라우트 다른 라우트 테이블에서 확인할 수 없다는 점 주의

### 블랙홀 라우트

특정 라우트를 차단하고 싶다면 Transit Gateway 라우트 테이블에 블랙홀(blackhofe) 엔트리를 추가, 추가된 블랙홀 라우트는 미리 지정된 라우트의 트래픽을 전부 차단.  
블랙홀 라우트는 위협 요소로 알려진 IP 주소 등 영구적 차단할 때 물론  아직 연결 상태 유지된 VPC 트래픽을 일시적으로 차단할 때 유용

# AWS Direct Connect

AWS Direct Connect 서비스 AWS 리소스에 대한 프라이빗, 저지연성 연결 제공. 주요 장점 중 하나 AWS 리소스 접속 시, 인터넷 우회 접속할 수 있는 방법 제공해 문제 발생 가능성은 낮추고 광대역 인터넷을 사용할 수 있도록 해주는 것

대량의 데이터를 전송할 때, 또는 실시간 데이터를 전송할 때 특히 유용, 법규에 의해 퍼블릭 인터넷으로 데이터를 전송해서는 안 될 때도 유용.  
Direct Connect 이용 특정 리전 있는 EC2 및 RDS 인스턴스, S3 버킷 등 모든 AWS 리소스 퍼블릭이 아닌, 프라이빗 인터넷 망 접속

DIrect Connect 전용 및 호스트, 두 가지 타입 제공

### 전용 연결 타입

전용(Dedicated) 연결 타입은 물리적인 단일 연결 AWS Direct Connect 지점 중단.  
전용 연결 이용하려면 Direct Connect 지점 자체 장비 추가해야함.  
각 연결 지점은 AWS 리전 연결 돼 있음, 연결 지점을 통해 해당 리전 있는 AWS 리소스 접속.  
ex. Digital Realty ATL1 Direct Connect 시설 us-east-1 리전 대한 연결 서비스 제공. 전용 연결 타입 이용 시, 1Gbps 또는 10Gbps 연결 속도 선택.  

### 호스트 연결 타입

1Gbps 미만 연결 속도로 충분 Direct Connect 지점 자체 장비를 추가할 여력 없다면, 50Mbps-10Gbps 연결 지원 호스트(Hosted) 연결 타입을 이용. 호스트 연결 타입은 Direct Connect 연결 지점 데이터 센터 또는 사무실 잇는 라스트 마일(last-mile) 연결 제공

### Direct Connect Gateways

Direct Connect Gateway는 리전 내 여러 VPC 하나 연결 지점 접속할 수 있도록 해주는 글로벌 리소스.  
AWS 측 Transit Gateway 또는 VPG가 Direct Connect Gateway로서 역할 담당, 사용자 측 Direct Connect Gateway가 온프레미스 장비로 BGP 세션 유지 IPv4 및 IPv6 라우트 프리픽스를 전파 및 수신

### 가상 인터페이스

사용자 Direct Connect 연결 방식 따라 하나 이상의 가상 인터페이스(Virtual Interfaces) 생성 사용하게 되면, AWS 세 가지 가상 인터페이스 제공

**프라이빗 가상 인터페이스**   
단일 VPC 내, EC2 또는 RDS 인스턴스 등과 같은 리소스의 프라이빗 IP 주소 연결

**퍼블릭 가상 인터페이스**   
퍼블릭 엔드포인트를 지닌 S3 또는 DynamoDB와 같은 AWS 서비스의 퍼블릭 IP 주소 연결, 온프레미스 애플리케이션을 퍼블릭 엔드포인트 이용 AWS 서비스 연결하려는 경우 유용

**트랜싯 가상 인터페이스**   
하나 이상의 AWS 트랜싯 게이트웨이에 연결.  
트랜싯 게이트웨이는 다수의 VPC 흩어져 있는 리소스 연결할 때 주로 사용, 1Gbps 이상의 속도 제공  
1Gbps 이상의 속도를 지닌 Direct Connect 링크 여러 개의 가상 인터페이스와 연결해서 사용, 이 보다 낮은 속도 링크는 하나의 가상 인터페이스 연결만 지원

참고 | VPN 연결과 달리 Direct Connect 링크는 암호화 기능을 제공하지 않지만, AWS 엔드포인트가 이미 TLS 암호화돼 있으므로 온프레미스 네트워크와 AWS 간 연결은 안전한 상태를 유지.

### Direct Connect SiteLink

Direct Connect SiteLInk는 Direct Connect 네트워크를 이용한 두 개의 온프레미스 사이트 연결 서비스.  
두 온프레미스 사이트 연결, 동일 Direct Connect Gateway 각 사이트 VIF 연결한 뒤 각 VIF에서 Direct Connect SiteLink를 활성화.  
Direct Connect SiteLInk는 BGP 및 IPv6 지원

# 고성능 컴퓨팅

고성능 컴퓨팅(High-performance computing, HPC)은 집약적인 워크로드를 다수의 인스턴스 이용해서 동시 병렬적 처리하는 연산 패러다임.  
→ 인스턴스는 HPC 클러스터를 이루게 되며, 인스턴스 간 상호작용 수준 따라 두 개의 카테고리로 나뉨

**느슨하게 연결된 클러스터**(Loosely Coupled)  
느슨하게 연결된 워크로드 개별 인스턴스가 독립적 처리할 수 있도록 다시 세분화, 이미지 프로세싱 등 업무 주로 활용.  
다른 활용 사례인 DNA 염기배열 분석(DNA sequencing) 경우, 게놈 개별 요소로 세분화한 뒤, 이들 게놈 요소를 또 다른 노드에 추가 새로운 분석 시행할 수 있음.  
느슨하게 연결된 클러스터의 경우, 하나의 인스턴스는 다른 인스턴스와 완전히 별개의 요소로 작동, 고속의 통신 등을 필요로 하지 않음, 별개의 클러스터 플레이스먼트 그룹 배치

**긴밀하게 연결된 클러스터**(Tightly Coupled)   
긴밀하게 연결된 워크로드는 개별적 분리하기 어렵고, 처리를 위해 상당한 수준 컴퓨팅 파워가 필요.  
이런 작업을 처리하려면 여러 개의 인스턴스 단일 슈퍼 컴퓨터와 같이 작동할 수 있어야 하므로 인스턴스는 고속의 네트워크로 서로 연결돼 있어야함.  
→ 여러 개의 인스턴스를 긴밀하게 연결해서 동일 클러스터 플레이스먼트 그룹에 배치하는 작업 필요

긴밀하게 연결된 워크로드의 대표적 사례    
하나의 변수가 다른 변수에 영향을 미치는 복합적인 시뮬레이션 작업, 머신러닝, 기상 예측 등도 이에 해당.  
클러스터의 각 인스턴스는 기상 조건 데이터를 기초로 분석 시작, 기상 예측을 위한 지역, 기온, 강수량, 습도, 풍속 등 다양한 변수를 바꿔가며 시뮬레이션 함.  
변수는 얼마의 값이든 늘 존재하며 기상 예측에 영향을 미치므로, 값의 변화 지속적으로 공유하며 변화 수준 예측

개별 인스턴스의 성능 저하 문제가 클러스터 전체 이어지지 않도록, 긴밀학 연결된 클러스터의 인스턴스는 거의 동일한 사양 구성하는 경우 많음.  
또한 개별 인스턴스의 실패가 다른 인스턴스에 영향을 주지 않도록, 개별 인스턴스의 시뮬레이션 상태 또는 단계를 정기적으로 저장 실패 상황 대비

참고 | HPC 단어는 보통 긴밀하게 연결된 HPC 클러스터 의미.  
보통 경우 HPC 고속, 저지연성, 고신뢰성 네트워크 연결 기본 속성

## 일래스틱 패브릭 어댑터

일래스틱 패브릭 어댑터(Elastic Fabric Adapter, EFA)는 전통적인 TCP/IP  네트워크 연결성 지원하는 특수한 형태 ENA이며, Libfabric API 이용 OS 기본 TCP/IP 스택을 우회 EFA 직접 접속할 수 있도록 해주므로 HPC 애플리케이션 위한 높은 처리량 및 저지연성 제공

EFA 트래픽은 라우팅으로 제어할 수 없으므로, HPC 애플리케이션 EFA 적용할 때 모든 인스턴스가 동일 서브넷 내에 있도록 해야함.  
클러스터 내 모든 EFA 동일한 보안 그룹에 부착, 보안 그룹은 유입 및 유출되는 모든 트래픽 허용.
+ 인스턴스는 동일 클러스터 플레이스먼트 그룹 넣어서 네트워크 전송 지연 최소화하는 것이 좋음

EFA 상당히 고가인 인스턴스 타입만 지원, 하나의 인스턴스에는 하나의 EFA만 부착 인스턴스 시작 시 혹은 인스턴스 중지 시에만 EFA 부착 작업할 수 있음

# AWS ParallelCluster

AWS ParallelCluster는 Linux 기반 HPC 클러스터 자동 관리, 클러스터 인스턴스 프로비저닝 작업 수행, 15GB 공유 파일 시스템 자동 생성

공유 파일 시스템은 마스터 인스턴스에 부착된 EBS 불륨 저장, NFS(Network File System) 통해 다른 인스턴스 저장된 파일 공유.  
NFS 외 Amazon EFS 또는 ParallelCluster는 AWS Batch 이용 배치 스케줄러 생성.  
사용자가 배치 스케줄러 HPC 컴퓨팅 잡을 제출, ParallelCluster 작업 맞춰 자동으로 클러스터의 확대 또는 축소
